---
title: "Cleans us casts in cruise"
author: "Mostafa, Tylar, Sebastian"
date: "2024-05-08"
format: html
code-fold: true
editor: source
params: 
  # cruise_id: WS20006
  cruise_id: WS22072
---
# Cruise `r params$cruise_id`

```{R}
#| code-summary: setup
if (!nzchar(system.file(package = "librarian"))) {
  install.packages("librarian")
}

librarian::shelf(
  quiet = TRUE,
  readr, here, glue, "jiho/castr", dplyr, oce, tidyr
)
```

```{R}
ctd_dir <- here("data/01_raw/combined_fl_keys_data")
fpath <- here(glue(
  "{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv"
))

cruise_df <- read_csv(fpath, show_col_types = FALSE)
```


```{R}
#| code-summary: plot depth & pressure vs time elapsed
library(ggplot2)
data <- cruise_df
stations <- unique(data$station)
final_ctd <- list()

for (station_name in stations) {
  # cat(station_name, "\n")
  test <- filter(data, station == station_name)
  p <- ggplot(test, aes(x = time_elapsed)) +
    geom_point(aes(y = depth), color = "blue") +  # Plot depth in blue
    geom_line(aes(y = sea_water_pressure), color = "red") +  # Plot sea water pressure in red
    ggtitle(glue("Station Name: {station_name}")) +
    ylab("Depth and Sea Water Pressure")  # Custom y-axis title
  print(p)
}
```

```{R}
ctd_load <- function(data, other_params = NULL) {
  stations <- unique(data$station)
  final_ctd <- list()
  
  for (station_name in stations) {
    cat(station_name, "\n")
    test <- filter(data, station == station_name)
    
    # create csv into ctd object
    test_ctd <-
      as.ctd(
        salinity    = test$sea_water_salinity,
        temperature = test$sea_water_temperature,
        pressure    = test$sea_water_pressure,
        station     = test$station
      )
    
    # add additional columns to ctd object
    if (!is.null(other_params)) {
      for (param_name in other_params) {
        test_ctd <-
          oceSetData(
            object = test_ctd,
            name   = param_name,
            value  = test[[param_name]]
          )
      }
    }
    
    final_ctd[[station_name]] <- test_ctd
  }
  return(final_ctd)
}
```

```{R}
library(purrr)  # For map() function
library(fs)     # For dir_ls() function

# Define other parameters to add
other_params <- c(
  "cruise_id", "station", "time", "time_elapsed", 
  "latitude", "longitude", "sea_water_electrical_conductivity", 
  "CDOM", "dissolved_oxygen"," oxygen_saturation", "chlorophyll_concentration", 
  "chlorophyll_fluorescence", "photosynthetically_available_radiation", "beam_attenuation","beam_transmission"
)

# Split data by station and create data list
ctd_FK <- cruise_df %>%
  split(.$station) %>%
  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)
```


```{R}
#| code-summary: plotting scans for each cast in the first list 
for (i in seq(ctd_FK)){
  cast <- ctd_FK[[i]][[1]]  # 1 is selecting only the first sublist
  # print(i)
  print(glue("=== station: {cast@metadata$station[1]}"))
  print(glue("# scans: {length(cast@data$scan)}"))
  plotScan(cast)
}
```

```{R}
#| code-summary: plotting each cast in the first list 
#| message: false
#| warning: false
for (i in seq(ctd_FK)){
  cast <- ctd_FK[[i]][[1]]  # 1 is selecting only the first sublist
  tryCatch({
    plot(ctdDecimate(ctdTrim(cast)))
  }, error = function(e){
    print(e)
  })
}
```



```{R}
#| code-summary: plotting other parameters for each cast in the first list 
#| message: false
#| warning: false

# Loop through each CTD cast
for (i in seq(ctd_FK)){
  cast <- ctd_FK[[i]][[1]]  # Assuming each sublist contains only one relevant CTD object
  tryCatch({
    # Extract metadata for station name and cruise ID
    station_name <- cast@metadata$station[1]
    cruise_id <- cast@data$cruise_id[1]

    # Generate a title with station name and cruise ID
    overall_title <- glue::glue("Station: {station_name}, Cruise ID: {cruise_id}")

    # Set margins: increase the outer margin for the title
    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title

    # Plotting function with specific parameters
    oce::plot(
      x = ctdDecimate(ctdTrim(cast)),
      which = c(
        "chlorophyll_concentration", "sea_water_electrical_conductivity",
        "CDOM", "dissolved_oxygen", "photosynthetically_available_radiation",
        "beam_attenuation"
      ),
      main = ""  # No main title for individual subplots
    )

    # Place a single overall title at the top of the plot frame
    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)

    # Reset outer margins to default
    par(oma = c(0, 0, 0, 0))

  }, error = function(e) {
    print(e$message)  # Print any errors that occur during plotting
  })
}
```


```{R}
#| code-summary: loop through every cast, clean, & save
#| message: false
#| warning: false

combined_df <- data.frame()
for (i in seq(ctd_FK)){
  cast <- ctd_FK[[i]][[1]]  # 1 is selecting only the first sublist
  
  # clean cast 
  trimmed_cast <- ctdTrim(cast)
  decimated_cast <- ctdDecimate(trimmed_cast, p = 0.5)
  
  # convert to df
  cast_df <- as.data.frame(decimated_cast@data)
  
  # Add metadata
  # assumes station ID and cruise ID the same for all & just uses 1st one
  cast_df <- mutate(
    cast_df,
    station = cast@data$station[1],
    cruise_id = cast@data$cruise_id[1]
  )

  # drop NA rows left by cleaning
  cast_df <- subset(cast_df, !is.na(scan))
  
  # Append the data to the combined dataframe
  combined_df <- rbind(combined_df, cast_df)
}
# Save to CSV
file_path <- here(glue("data/cleaned/{cruise_id}.csv"))
write.csv(combined_df, file_path, row.names = FALSE)

```
