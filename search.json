[
  {
    "objectID": "cruise_report/cruise_report_template.html",
    "href": "cruise_report/cruise_report_template.html",
    "title": "WS22072 WS22072",
    "section": "",
    "text": "WS22072 WS22072\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, ggplot2, glue, \"jiho/castr\", dplyr, oce, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\nplot depth & pressure vs time elapsed\ndata &lt;- cruise_df\nstations &lt;- unique(data$station)\nfinal_ctd &lt;- list()\n\nfor (station_name in stations) {\n  # cat(station_name, \"\\n\")\n  test &lt;- filter(data, station == station_name)\n  p &lt;- ggplot(test, aes(x = time_elapsed)) +\n    geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n    geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n    ggtitle(glue(\"Station Name: {station_name}\")) +\n    ylab(\"Depth and Sea Water Pressure\")  # Custom y-axis title\n  print(p)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nctd_load &lt;- function(data, other_params = NULL) {\n  stations &lt;- unique(data$station)\n  final_ctd &lt;- list()\n  \n  for (station_name in stations) {\n    cat(station_name, \"\\n\")\n    test &lt;- filter(data, station == station_name)\n    \n    # create csv into ctd object\n    test_ctd &lt;-\n      as.ctd(\n        salinity    = test$sea_water_salinity,\n        temperature = test$sea_water_temperature,\n        pressure    = test$sea_water_pressure,\n        station     = test$station\n      )\n    \n    # add additional columns to ctd object\n    if (!is.null(other_params)) {\n      for (param_name in other_params) {\n        test_ctd &lt;-\n          oceSetData(\n            object = test_ctd,\n            name   = param_name,\n            value  = test[[param_name]]\n          )\n      }\n    }\n    \n    final_ctd[[station_name]] &lt;- test_ctd\n  }\n  return(final_ctd)\n}\n\n\n\n\nCode\nlibrary(purrr)  # For map() function\nlibrary(fs)     # For dir_ls() function\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\" oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \"beam_attenuation\",\"beam_transmission\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10 \n12 \n16 \n18 \n2 \n21/LK \n3 \n6.5 \n7 \n9 \n9.5 \nEK_IN \nEK_MID \nEK_OFF \nMR \nWS \n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]][[1]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 89\n\n\n\n\n\n=== station: 12\n# scans: 4880\n\n\n\n\n\n=== station: 16\n# scans: 2678\n\n\n\n\n\n=== station: 18\n# scans: 4330\n\n\n\n\n\n=== station: 2\n# scans: 2592\n\n\n\n\n\n=== station: 21/LK\n# scans: 5318\n\n\n\n\n\n=== station: 3\n# scans: 4489\n\n\n\n\n\n=== station: 6.5\n# scans: 7772\n\n\n\n\n\n=== station: 7\n# scans: 2435\n\n\n\n\n\n=== station: 9\n# scans: 4631\n\n\n\n\n\n=== station: 9.5\n# scans: 9529\n\n\n\n\n\n=== station: EK_IN\n# scans: 2736\n\n\n\n\n\n=== station: EK_MID\n# scans: 2583\n\n\n\n\n\n=== station: EK_OFF\n# scans: 4189\n\n\n\n\n\n=== station: MR\n# scans: 5130\n\n\n\n\n\n=== station: WS\n# scans: 4022\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]][[1]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other parameters for each cast in the first list\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]][[1]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"chlorophyll_concentration\", \"sea_water_electrical_conductivity\",\n        \"CDOM\", \"dissolved_oxygen\", \"photosynthetically_available_radiation\",\n        \"beam_attenuation\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]][[1]]  # 1 is selecting only the first sublist\n  \n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS22337.html",
    "href": "cruise_report/cruise_reports/WS22337.html",
    "title": "WS22337 WS22337",
    "section": "",
    "text": "WS22337 WS22337\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, ggplot2, glue, \"jiho/castr\", dplyr, oce, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\nplot depth & pressure vs time elapsed\ndata &lt;- cruise_df\nstations &lt;- unique(data$station)\nfinal_ctd &lt;- list()\n\nfor (station_name in stations) {\n  # cat(station_name, \"\\n\")\n  test &lt;- filter(data, station == station_name)\n  p &lt;- ggplot(test, aes(x = time_elapsed)) +\n    geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n    geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n    ggtitle(glue(\"Station Name: {station_name}\")) +\n    ylab(\"Depth and Sea Water Pressure\")  # Custom y-axis title\n  print(p)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nctd_load &lt;- function(data, other_params = NULL) {\n  stations &lt;- unique(data$station)\n  final_ctd &lt;- list()\n  \n  for (station_name in stations) {\n    cat(station_name, \"\\n\")\n    test &lt;- filter(data, station == station_name)\n    \n    # create csv into ctd object\n    test_ctd &lt;-\n      as.ctd(\n        salinity    = test$sea_water_salinity,\n        temperature = test$sea_water_temperature,\n        pressure    = test$sea_water_pressure,\n        station     = test$station\n      )\n    \n    # add additional columns to ctd object\n    if (!is.null(other_params)) {\n      for (param_name in other_params) {\n        test_ctd &lt;-\n          oceSetData(\n            object = test_ctd,\n            name   = param_name,\n            value  = test[[param_name]]\n          )\n      }\n    }\n    \n    final_ctd[[station_name]] &lt;- test_ctd\n  }\n  return(final_ctd)\n}\n\n\n\n\nCode\nlibrary(purrr)  # For map() function\nlibrary(fs)     # For dir_ls() function\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\" oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \"beam_attenuation\",\"beam_transmission\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10 \n12 \n16 \n18 \n2 \n21/LK \n3 \n6.5 \n7 \n9 \n9.5 \nEK_IN \nEK_MID \nEK_OFF \nMR \nWS \n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]][[1]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 89\n\n\n\n\n\n=== station: 12\n# scans: 4880\n\n\n\n\n\n=== station: 16\n# scans: 2678\n\n\n\n\n\n=== station: 18\n# scans: 4330\n\n\n\n\n\n=== station: 2\n# scans: 2592\n\n\n\n\n\n=== station: 21/LK\n# scans: 5318\n\n\n\n\n\n=== station: 3\n# scans: 4489\n\n\n\n\n\n=== station: 6.5\n# scans: 7772\n\n\n\n\n\n=== station: 7\n# scans: 2435\n\n\n\n\n\n=== station: 9\n# scans: 4631\n\n\n\n\n\n=== station: 9.5\n# scans: 9529\n\n\n\n\n\n=== station: EK_IN\n# scans: 2736\n\n\n\n\n\n=== station: EK_MID\n# scans: 2583\n\n\n\n\n\n=== station: EK_OFF\n# scans: 4189\n\n\n\n\n\n=== station: MR\n# scans: 5130\n\n\n\n\n\n=== station: WS\n# scans: 4022\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]][[1]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other parameters for each cast in the first list\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]][[1]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"chlorophyll_concentration\", \"sea_water_electrical_conductivity\",\n        \"CDOM\", \"dissolved_oxygen\", \"photosynthetically_available_radiation\",\n        \"beam_attenuation\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]][[1]]  # 1 is selecting only the first sublist\n  \n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS22072.html",
    "href": "cruise_report/cruise_reports/WS22072.html",
    "title": "WS22072 WS22072",
    "section": "",
    "text": "WS22072 WS22072\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, ggplot2, glue, \"jiho/castr\", dplyr, oce, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\nplot depth & pressure vs time elapsed\ndata &lt;- cruise_df\nstations &lt;- unique(data$station)\nfinal_ctd &lt;- list()\n\nfor (station_name in stations) {\n  # cat(station_name, \"\\n\")\n  test &lt;- filter(data, station == station_name)\n  p &lt;- ggplot(test, aes(x = time_elapsed)) +\n    geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n    geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n    ggtitle(glue(\"Station Name: {station_name}\")) +\n    ylab(\"Depth and Sea Water Pressure\")  # Custom y-axis title\n  print(p)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nctd_load &lt;- function(data, other_params = NULL) {\n  stations &lt;- unique(data$station)\n  final_ctd &lt;- list()\n  \n  for (station_name in stations) {\n    cat(station_name, \"\\n\")\n    test &lt;- filter(data, station == station_name)\n    \n    # create csv into ctd object\n    test_ctd &lt;-\n      as.ctd(\n        salinity    = test$sea_water_salinity,\n        temperature = test$sea_water_temperature,\n        pressure    = test$sea_water_pressure,\n        station     = test$station\n      )\n    \n    # add additional columns to ctd object\n    if (!is.null(other_params)) {\n      for (param_name in other_params) {\n        test_ctd &lt;-\n          oceSetData(\n            object = test_ctd,\n            name   = param_name,\n            value  = test[[param_name]]\n          )\n      }\n    }\n    \n    final_ctd[[station_name]] &lt;- test_ctd\n  }\n  return(final_ctd)\n}\n\n\n\n\nCode\nlibrary(purrr)  # For map() function\nlibrary(fs)     # For dir_ls() function\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\" oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \"beam_attenuation\",\"beam_transmission\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10 \n12 \n16 \n18 \n2 \n21/LK \n3 \n6.5 \n7 \n9 \n9.5 \nEK_IN \nEK_MID \nEK_OFF \nMR \nWS \n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]][[1]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 89\n\n\n\n\n\n=== station: 12\n# scans: 4880\n\n\n\n\n\n=== station: 16\n# scans: 2678\n\n\n\n\n\n=== station: 18\n# scans: 4330\n\n\n\n\n\n=== station: 2\n# scans: 2592\n\n\n\n\n\n=== station: 21/LK\n# scans: 5318\n\n\n\n\n\n=== station: 3\n# scans: 4489\n\n\n\n\n\n=== station: 6.5\n# scans: 7772\n\n\n\n\n\n=== station: 7\n# scans: 2435\n\n\n\n\n\n=== station: 9\n# scans: 4631\n\n\n\n\n\n=== station: 9.5\n# scans: 9529\n\n\n\n\n\n=== station: EK_IN\n# scans: 2736\n\n\n\n\n\n=== station: EK_MID\n# scans: 2583\n\n\n\n\n\n=== station: EK_OFF\n# scans: 4189\n\n\n\n\n\n=== station: MR\n# scans: 5130\n\n\n\n\n\n=== station: WS\n# scans: 4022\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]][[1]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other parameters for each cast in the first list\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]][[1]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"chlorophyll_concentration\", \"sea_water_electrical_conductivity\",\n        \"CDOM\", \"dissolved_oxygen\", \"photosynthetically_available_radiation\",\n        \"beam_attenuation\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]][[1]]  # 1 is selecting only the first sublist\n  \n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "ctd_report/ctd_report_template.html",
    "href": "ctd_report/ctd_report_template.html",
    "title": "Clean up cast",
    "section": "",
    "text": "TODO: upate to use OCE package & code from https://github.com/Mostafaawada/Dissertation_code/blob/main/analysis/cast_cleanup.qmd\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, glue, \"jiho/castr\", dplyr, oce, tidyr\n)\n\nsource(here(\"R/ctd_load.R\"))\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw\")\nfpath &lt;- here(glue(\n  \"data/01_raw/{params$cruise_id}/{params$cruise_id}_{params$station_id}.csv\"\n))\n# WS23061 &lt;-\n#   ctd_dir %&gt;%\n#   fs::dir_ls(regexp = \"{params$cruise_id}\") %&gt;%\n#   read_csv(show_col_types = FALSE)\n\nctd_station_df &lt;- read_csv(fpath, show_col_types = FALSE)\n\n\n\n\n\n\nload data file\n# test_data &lt;- \n#   ctd_station_df %&gt;%\n#   nest(.by = station) %&gt;%\n#   slice(1:2) %&gt;%\n#   tidyr::unnest(data) \n\n# ctd &lt;- ctd_load(\n#   fpath, \n#   other_params = c(\"chlorophyll_fluorescence\", \"dissolved_oxygen\"))\n\n\n\n\nplot scans\n# plotScan(ctd)\n\n\n\n\n\n\n\nplot data using ctd_plotting.R\nsource(here(\"R/ctd_plotting.R\"))\n  salinity &lt;-\n    ctd_plotting(\n      ctd_station_df,\n      sea_water_pressure,\n      sea_water_salinity,\n      xlab = \"Practical salinity\",\n      .color = \"darkgreen\"\n    )\n  \n  # temperature\n  temp &lt;- \n    ctd_plotting(\n      ctd_station_df,\n      sea_water_pressure,\n      sea_water_temperature,\n      xlab = expression(~Temperature ~ (degree ~ C))\n  )\n\n  # combine salinity and temperature\n  combined_plot &lt;- cowplot::plot_grid(salinity, temp, nrow = 1)\n\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n\n\nplot data using ctd_plotting.R\n  print(combined_plot)\n\n\n\n\n\n\n\nplot data like castr example\nggplot(ctd_station_df) + geom_path(aes(x=sea_water_temperature, y=-sea_water_pressure, group=time), alpha=0.6)\n\n\n\n\n\n\n\ndespike the data using castr\nctd_clean &lt;- ctd_station_df %&gt;% group_by(time) %&gt;%\n  mutate(temp=castr::despike(sea_water_temperature, mult=3))\n\nggplot(ctd_clean) + geom_path(aes(x=temp, y=-sea_water_pressure, group=time), alpha=0.6)"
  },
  {
    "objectID": "ctd_report/ctd_report_template.html#use-oce-package-to-load-ctd",
    "href": "ctd_report/ctd_report_template.html#use-oce-package-to-load-ctd",
    "title": "Clean up cast",
    "section": "",
    "text": "load data file\n# test_data &lt;- \n#   ctd_station_df %&gt;%\n#   nest(.by = station) %&gt;%\n#   slice(1:2) %&gt;%\n#   tidyr::unnest(data) \n\n# ctd &lt;- ctd_load(\n#   fpath, \n#   other_params = c(\"chlorophyll_fluorescence\", \"dissolved_oxygen\"))\n\n\n\n\nplot scans\n# plotScan(ctd)"
  },
  {
    "objectID": "ctd_report/ctd_report_template.html#without-using-oce-package",
    "href": "ctd_report/ctd_report_template.html#without-using-oce-package",
    "title": "Clean up cast",
    "section": "",
    "text": "plot data using ctd_plotting.R\nsource(here(\"R/ctd_plotting.R\"))\n  salinity &lt;-\n    ctd_plotting(\n      ctd_station_df,\n      sea_water_pressure,\n      sea_water_salinity,\n      xlab = \"Practical salinity\",\n      .color = \"darkgreen\"\n    )\n  \n  # temperature\n  temp &lt;- \n    ctd_plotting(\n      ctd_station_df,\n      sea_water_pressure,\n      sea_water_temperature,\n      xlab = expression(~Temperature ~ (degree ~ C))\n  )\n\n  # combine salinity and temperature\n  combined_plot &lt;- cowplot::plot_grid(salinity, temp, nrow = 1)\n\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n\n\nplot data using ctd_plotting.R\n  print(combined_plot)\n\n\n\n\n\n\n\nplot data like castr example\nggplot(ctd_station_df) + geom_path(aes(x=sea_water_temperature, y=-sea_water_pressure, group=time), alpha=0.6)\n\n\n\n\n\n\n\ndespike the data using castr\nctd_clean &lt;- ctd_station_df %&gt;% group_by(time) %&gt;%\n  mutate(temp=castr::despike(sea_water_temperature, mult=3))\n\nggplot(ctd_clean) + geom_path(aes(x=temp, y=-sea_water_pressure, group=time), alpha=0.6)"
  },
  {
    "objectID": "ctd_report/ctd_reports.html",
    "href": "ctd_report/ctd_reports.html",
    "title": "CTD Reports",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SEUS MBON Cruise Data",
    "section": "",
    "text": "setup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  librarian, conflicted, ggplot2, tibble, tidyr, readr, purrr, dplyr, stringr,\n  forcats, lubridate, glue, fs, magrittr, here, rerddap, cli,\n)\n\nconflicts_prefer(\n  dplyr::filter(),\n  dplyr::select()\n)\n\n\n[conflicted] Will prefer dplyr::filter over any other package.\n[conflicted] Will prefer dplyr::select over any other package.\n\n\nsetup\n# source(here(\"R\", \"ctd_download.R\"))\n\n\n\n\nlist all cruises\n\"https://gcoos5.geos.tamu.edu/erddap/\" %&gt;%\n  Sys.setenv(RERDDAP_DEFAULT_URL = .)\n\n# search for  all cruise ctd tables in ERDDAP\nall_cruise_info &lt;-\n  ed_search_adv(\n    query     = \"Walton Smith CTD\",\n    # maxTime   = \"2016-01-01T01:00:00Z\",\n    page_size = 1e4\n  )\n\n# find unique cruise names\nall_cruise_ids &lt;-\n  str_extract(all_cruise_info$info$title, \"(WS|SAV|WB|H)\\\\d{3,5}\") %&gt;%\n  unique()\n\n# print info about cruise IDs found\ncli::cli_alert_info(\n  c(\n    \"{col_green(\\\"Number of files queried\\\")}: \",\n    \"{nrow(all_cruise_info$info)} files\\n\",\n    \"{col_blue(\\\"N cruises:\\\")} {length(all_cruise_ids)}\\n\\n\"\n  )\n)\n\n\nℹ Number of files queried: 3512 files\nN cruises: 69\n\n\nlist all cruises\nprint(all_cruise_ids)\n\n\n [1] \"WS0603\"   \"WS0612\"   \"WS0618\"   \"WS0623\"   \"WS0704\"   \"WS0718\"  \n [7] \"WS0802\"   \"WS0807\"   \"WS0901\"   \"WS0906\"   \"WS0914\"   \"WS0919\"  \n[13] \"WS0923\"   \"WS1004\"   \"WS1007\"   \"WS1015\"   \"WS1018\"   \"WS1102\"  \n[19] \"WS1106\"   \"WS1113\"   \"WS1116\"   \"WS1202\"   \"WS1207\"   \"WS1212\"  \n[25] \"WS1418\"   \"WS15103\"  \"WS15152\"  \"WS15208\"  \"WS15264\"  \"WS15320\" \n[31] \"WS16004\"  \"WS16074\"  \"WS16207\"  \"WS16263\"  \"WS16319\"  \"WS17030\" \n[37] \"WS17086\"  \"WS17170\"  \"WS17212\"  \"WS17282\"  \"WS18008\"  \"WS18120\" \n[43] \"WS18218\"  \"WS18285\"  \"WS18351\"  \"WS19028\"  \"WS19119\"  \"WS19210\" \n[49] \"WS19266\"  \"WS19322\"  \"WS20006\"  \"WS20231\"  \"WS20279\"  \"WS20342\" \n[55] \"WS21032\"  \"WS21093\"  \"WS21151\"  \"WS21212\"  \"WS21338\"  \"WS22022\" \n[61] \"WS22072\"  \"WS22141\"  \"WS22215\"  \"WS22281\"  \"WS22337\"  \"WS23010\" \n[67] \"WS23061\"  \"SAV1803\"  \"SAV18173\"\n\n\n\n\nget ready for download\ndir_data_dwnld_save &lt;- here(\"data\", \"raw\", \"ctd\")       # download path\ndir_data_avg_save   &lt;- here(\"data\", \"processed\", \"ctd\") # averaged path\n\ndir_create(dir_data_avg_save)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS20006.html",
    "href": "cruise_report/cruise_reports/WS20006.html",
    "title": "WS20006 WS20006",
    "section": "",
    "text": "WS20006 WS20006\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, ggplot2, glue, \"jiho/castr\", dplyr, oce, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\nplot depth & pressure vs time elapsed\ndata &lt;- cruise_df\nstations &lt;- unique(data$station)\nfinal_ctd &lt;- list()\n\nfor (station_name in stations) {\n  # cat(station_name, \"\\n\")\n  test &lt;- filter(data, station == station_name)\n  p &lt;- ggplot(test, aes(x = time_elapsed)) +\n    geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n    geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n    ggtitle(glue(\"Station Name: {station_name}\")) +\n    ylab(\"Depth and Sea Water Pressure\")  # Custom y-axis title\n  print(p)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nctd_load &lt;- function(data, other_params = NULL) {\n  stations &lt;- unique(data$station)\n  final_ctd &lt;- list()\n  \n  for (station_name in stations) {\n    cat(station_name, \"\\n\")\n    test &lt;- filter(data, station == station_name)\n    \n    # create csv into ctd object\n    test_ctd &lt;-\n      as.ctd(\n        salinity    = test$sea_water_salinity,\n        temperature = test$sea_water_temperature,\n        pressure    = test$sea_water_pressure,\n        station     = test$station\n      )\n    \n    # add additional columns to ctd object\n    if (!is.null(other_params)) {\n      for (param_name in other_params) {\n        test_ctd &lt;-\n          oceSetData(\n            object = test_ctd,\n            name   = param_name,\n            value  = test[[param_name]]\n          )\n      }\n    }\n    \n    final_ctd[[station_name]] &lt;- test_ctd\n  }\n  return(final_ctd)\n}\n\n\n\n\nCode\nlibrary(purrr)  # For map() function\nlibrary(fs)     # For dir_ls() function\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\" oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \"beam_attenuation\",\"beam_transmission\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10 \n12 \n16 \n18 \n2 \n21.5 \n21/LK \n7 \n9 \n9.5 \nMR \nWS \n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]][[1]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1353\n\n\n\n\n\n=== station: 12\n# scans: 6615\n\n\n\n\n\n=== station: 16\n# scans: 1697\n\n\n\n\n\n=== station: 18\n# scans: 4576\n\n\n\n\n\n=== station: 2\n# scans: 1879\n\n\n\n\n\n=== station: 21.5\n# scans: 11304\n\n\n\n\n\n=== station: 21/LK\n# scans: 3971\n\n\n\n\n\n=== station: 7\n# scans: 2\n\n\n\n\n\n=== station: 9\n# scans: 5276\n\n\n\n\n\n=== station: 9.5\n# scans: 9876\n\n\n\n\n\n=== station: MR\n# scans: 5898\n\n\n\n\n\n=== station: WS\n# scans: 3919\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]][[1]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other parameters for each cast in the first list\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]][[1]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"chlorophyll_concentration\", \"sea_water_electrical_conductivity\",\n        \"CDOM\", \"dissolved_oxygen\", \"photosynthetically_available_radiation\",\n        \"beam_attenuation\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"chlorophyll_concentrationsea_water_electrical_conductivityCDOMdissolved_oxygenphotosynthetically_available_radiationbeam_attenuation\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"chlorophyll_concentrationsea_water_electrical_conductivityCDOMdissolved_oxygenphotosynthetically_available_radiationbeam_attenuation\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"chlorophyll_concentrationsea_water_electrical_conductivityCDOMdissolved_oxygenphotosynthetically_available_radiationbeam_attenuation\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"chlorophyll_concentrationsea_water_electrical_conductivityCDOMdissolved_oxygenphotosynthetically_available_radiationbeam_attenuation\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"chlorophyll_concentrationsea_water_electrical_conductivityCDOMdissolved_oxygenphotosynthetically_available_radiationbeam_attenuation\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"chlorophyll_concentrationsea_water_electrical_conductivityCDOMdissolved_oxygenphotosynthetically_available_radiationbeam_attenuation\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"chlorophyll_concentrationsea_water_electrical_conductivityCDOMdissolved_oxygenphotosynthetically_available_radiationbeam_attenuation\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"chlorophyll_concentrationsea_water_electrical_conductivityCDOMdissolved_oxygenphotosynthetically_available_radiationbeam_attenuation\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"chlorophyll_concentrationsea_water_electrical_conductivityCDOMdissolved_oxygenphotosynthetically_available_radiationbeam_attenuation\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"chlorophyll_concentrationsea_water_electrical_conductivityCDOMdissolved_oxygenphotosynthetically_available_radiationbeam_attenuation\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"chlorophyll_concentrationsea_water_electrical_conductivityCDOMdissolved_oxygenphotosynthetically_available_radiationbeam_attenuation\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"chlorophyll_concentrationsea_water_electrical_conductivityCDOMdissolved_oxygenphotosynthetically_available_radiationbeam_attenuation\\\" cannot be handled\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]][[1]]  # 1 is selecting only the first sublist\n  \n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports.html",
    "href": "cruise_report/cruise_reports.html",
    "title": "Cruise Reports",
    "section": "",
    "text": "WS20006 r params$cruise_id\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS22072 r params$cruise_id\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS22337 r params$cruise_id\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  }
]