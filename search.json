[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SEUS MBON Cruise Data",
    "section": "",
    "text": "setup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  librarian, conflicted, ggplot2, tibble, tidyr, readr, purrr, dplyr, stringr,\n  forcats, lubridate, glue, fs, magrittr, here, rerddap, cli,\n)\n\nconflicts_prefer(\n  dplyr::filter(),\n  dplyr::select()\n)\n\n\n[conflicted] Will prefer dplyr::filter over any other package.\n[conflicted] Will prefer dplyr::select over any other package.\n\n\nsetup\n# source(here(\"R\", \"ctd_download.R\"))\n\n\n\n\nlist all cruises\n\"https://gcoos5.geos.tamu.edu/erddap/\" %&gt;%\n  Sys.setenv(RERDDAP_DEFAULT_URL = .)\n\n# search for  all cruise ctd tables in ERDDAP\nall_cruise_info &lt;-\n  ed_search_adv(\n    query     = \"Walton Smith CTD\",\n    # maxTime   = \"2016-01-01T01:00:00Z\",\n    page_size = 1e4\n  )\n\n# find unique cruise names\nall_cruise_ids &lt;-\n  str_extract(all_cruise_info$info$title, \"(WS|SAV|WB|H)\\\\d{3,5}\") %&gt;%\n  unique()\n\n# print info about cruise IDs found\ncli::cli_alert_info(\n  c(\n    \"{col_green(\\\"Number of files queried\\\")}: \",\n    \"{nrow(all_cruise_info$info)} files\\n\",\n    \"{col_blue(\\\"N cruises:\\\")} {length(all_cruise_ids)}\\n\\n\"\n  )\n)\n\n\nâ„¹ Number of files queried: 3513 files\nN cruises: 69\n\n\nlist all cruises\nprint(all_cruise_ids)\n\n\n [1] \"WS0603\"   \"WS0612\"   \"WS0618\"   \"WS0623\"   \"WS0704\"   \"WS0718\"  \n [7] \"WS0802\"   \"WS0807\"   \"WS0901\"   \"WS0906\"   \"WS0914\"   \"WS0919\"  \n[13] \"WS0923\"   \"WS1004\"   \"WS1007\"   \"WS1015\"   \"WS1018\"   \"WS1102\"  \n[19] \"WS1106\"   \"WS1113\"   \"WS1116\"   \"WS1202\"   \"WS1207\"   \"WS1212\"  \n[25] \"WS1418\"   \"WS15103\"  \"WS15152\"  \"WS15208\"  \"WS15264\"  \"WS15320\" \n[31] \"WS16004\"  \"WS16074\"  \"WS16207\"  \"WS16263\"  \"WS16319\"  \"WS17030\" \n[37] \"WS17086\"  \"WS17170\"  \"WS17212\"  \"WS17282\"  \"WS18008\"  \"WS18120\" \n[43] \"WS18218\"  \"WS18285\"  \"WS18351\"  \"WS19028\"  \"WS19119\"  \"WS19210\" \n[49] \"WS19266\"  \"WS19322\"  \"WS20006\"  \"WS20231\"  \"WS20279\"  \"WS20342\" \n[55] \"WS21032\"  \"WS21093\"  \"WS21151\"  \"WS21212\"  \"WS21338\"  \"WS22022\" \n[61] \"WS22072\"  \"WS22141\"  \"WS22215\"  \"WS22281\"  \"WS22337\"  \"WS23010\" \n[67] \"WS23061\"  \"SAV1803\"  \"SAV18173\"\n\n\n\n\nget ready for download\ndir_data_dwnld_save &lt;- here(\"data\", \"raw\", \"ctd\")       # download path\ndir_data_avg_save   &lt;- here(\"data\", \"processed\", \"ctd\") # averaged path\n\ndir_create(dir_data_avg_save)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS23010.html",
    "href": "cruise_report/cruise_reports/WS23010.html",
    "title": "WS23010",
    "section": "",
    "text": "WS23010\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 3213 scans\n12: 5044 scans\n16: 3332 scans\n18: 6207 scans\n2:  2410 scans\n21/LK:  6110 scans\n7:  2635 scans\n9:  4250 scans\n9.5:    10157 scans\nMR: 4702 scans\nWS: 3826 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 3213\n\n\n\n\n\n=== station: 12\n# scans: 5044\n\n\n\n\n\n=== station: 16\n# scans: 3332\n\n\n\n\n\n=== station: 18\n# scans: 6207\n\n\n\n\n\n=== station: 2\n# scans: 2410\n\n\n\n\n\n=== station: 21/LK\n# scans: 6110\n\n\n\n\n\n=== station: 7\n# scans: 2635\n\n\n\n\n\n=== station: 9\n# scans: 4250\n\n\n\n\n\n=== station: 9.5\n# scans: 10157\n\n\n\n\n\n=== station: MR\n# scans: 4702\n\n\n\n\n\n=== station: WS\n# scans: 3826\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS22281.html",
    "href": "cruise_report/cruise_reports/WS22281.html",
    "title": "WS22281",
    "section": "",
    "text": "WS22281\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 5868 scans\n12: 4897 scans\n16: 2820 scans\n18: 3619 scans\n2:  3329 scans\n21/LK:  5426 scans\n7:  22 scans\n9:  5577 scans\n9.5:    17040 scans\nMR: 5153 scans\nWS: 4263 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 5868\n\n\n\n\n\n=== station: 12\n# scans: 4897\n\n\n\n\n\n=== station: 16\n# scans: 2820\n\n\n\n\n\n=== station: 18\n# scans: 3619\n\n\n\n\n\n=== station: 2\n# scans: 3329\n\n\n\n\n\n=== station: 21/LK\n# scans: 5426\n\n\n\n\n\n=== station: 7\n# scans: 22\n\n\n\n\n\n=== station: 9\n# scans: 5577\n\n\n\n\n\n=== station: 9.5\n# scans: 17040\n\n\n\n\n\n=== station: MR\n# scans: 5153\n\n\n\n\n\n=== station: WS\n# scans: 4263\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS22141.html",
    "href": "cruise_report/cruise_reports/WS22141.html",
    "title": "WS22141",
    "section": "",
    "text": "WS22141\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 2780 scans\n12: 4476 scans\n16: 3203 scans\n18: 2686 scans\n2:  2832 scans\n21/LK:  4092 scans\n7:  22 scans\n9:  4657 scans\n9.5:    7366 scans\nMR: 4390 scans\nWS: 4345 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 2780\n\n\n\n\n\n=== station: 12\n# scans: 4476\n\n\n\n\n\n=== station: 16\n# scans: 3203\n\n\n\n\n\n=== station: 18\n# scans: 2686\n\n\n\n\n\n=== station: 2\n# scans: 2832\n\n\n\n\n\n=== station: 21/LK\n# scans: 4092\n\n\n\n\n\n=== station: 7\n# scans: 22\n\n\n\n\n\n=== station: 9\n# scans: 4657\n\n\n\n\n\n=== station: 9.5\n# scans: 7366\n\n\n\n\n\n=== station: MR\n# scans: 4390\n\n\n\n\n\n=== station: WS\n# scans: 4345\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS22022.html",
    "href": "cruise_report/cruise_reports/WS22022.html",
    "title": "WS22022",
    "section": "",
    "text": "WS22022\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 1711 scans\n12: 3581 scans\n16: 2619 scans\n18: 3540 scans\n2:  2900 scans\n21/LK:  4921 scans\n7:  1837 scans\n9:  4317 scans\n9.5:    10084 scans\nMR: 2477 scans\nWS: 4192 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1711\n\n\n\n\n\n=== station: 12\n# scans: 3581\n\n\n\n\n\n=== station: 16\n# scans: 2619\n\n\n\n\n\n=== station: 18\n# scans: 3540\n\n\n\n\n\n=== station: 2\n# scans: 2900\n\n\n\n\n\n=== station: 21/LK\n# scans: 4921\n\n\n\n\n\n=== station: 7\n# scans: 1837\n\n\n\n\n\n=== station: 9\n# scans: 4317\n\n\n\n\n\n=== station: 9.5\n# scans: 10084\n\n\n\n\n\n=== station: MR\n# scans: 2477\n\n\n\n\n\n=== station: WS\n# scans: 4192\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"plot.new has not been called yet\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"plot.new has not been called yet\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"plot.new has not been called yet\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS21212.html",
    "href": "cruise_report/cruise_reports/WS21212.html",
    "title": "WS21212",
    "section": "",
    "text": "WS21212\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 1534 scans\n12: 3807 scans\n16: 1060 scans\n18: 2942 scans\n2:  3517 scans\n21/LK:  4301 scans\n7:  2660 scans\n9:  1545 scans\n9.5:    7129 scans\nMR: 3733 scans\nWS: 4593 scans\nWS2:    671 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1534\n\n\n\n\n\n=== station: 12\n# scans: 3807\n\n\n\n\n\n=== station: 16\n# scans: 1060\n\n\n\n\n\n=== station: 18\n# scans: 2942\n\n\n\n\n\n=== station: 2\n# scans: 3517\n\n\n\n\n\n=== station: 21/LK\n# scans: 4301\n\n\n\n\n\n=== station: 7\n# scans: 2660\n\n\n\n\n\n=== station: 9\n# scans: 1545\n\n\n\n\n\n=== station: 9.5\n# scans: 7129\n\n\n\n\n\n=== station: MR\n# scans: 3733\n\n\n\n\n\n=== station: WS\n# scans: 4593\n\n\n\n\n\n=== station: WS2\n# scans: 671\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"plot.new has not been called yet\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS21093.html",
    "href": "cruise_report/cruise_reports/WS21093.html",
    "title": "WS21093",
    "section": "",
    "text": "WS21093\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 1661 scans\n12: 3949 scans\n16: 2491 scans\n18: 3949 scans\n2:  3445 scans\n21/LK:  5134 scans\n7:  29 scans\n9:  3649 scans\nMR: 3828 scans\nWS: 3743 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1661\n\n\n\n\n\n=== station: 12\n# scans: 3949\n\n\n\n\n\n=== station: 16\n# scans: 2491\n\n\n\n\n\n=== station: 18\n# scans: 3949\n\n\n\n\n\n=== station: 2\n# scans: 3445\n\n\n\n\n\n=== station: 21/LK\n# scans: 5134\n\n\n\n\n\n=== station: 7\n# scans: 29\n\n\n\n\n\n=== station: 9\n# scans: 3649\n\n\n\n\n\n=== station: MR\n# scans: 3828\n\n\n\n\n\n=== station: WS\n# scans: 3743\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS20342.html",
    "href": "cruise_report/cruise_reports/WS20342.html",
    "title": "WS20342",
    "section": "",
    "text": "WS20342\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 2804 scans\n12: 3637 scans\n15: 4703 scans\n15.5:   9730 scans\n16: 1581 scans\n18: 3897 scans\n2:  4068 scans\n21/LK:  4359 scans\n7:  4783 scans\nMR: 3438 scans\nWS: 2341 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 2804\n\n\n\n\n\n=== station: 12\n# scans: 3637\n\n\n\n\n\n=== station: 15\n# scans: 4703\n\n\n\n\n\n=== station: 15.5\n# scans: 9730\n\n\n\n\n\n=== station: 16\n# scans: 1581\n\n\n\n\n\n=== station: 18\n# scans: 3897\n\n\n\n\n\n=== station: 2\n# scans: 4068\n\n\n\n\n\n=== station: 21/LK\n# scans: 4359\n\n\n\n\n\n=== station: 7\n# scans: 4783\n\n\n\n\n\n=== station: MR\n# scans: 3438\n\n\n\n\n\n=== station: WS\n# scans: 2341\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS20231.html",
    "href": "cruise_report/cruise_reports/WS20231.html",
    "title": "WS20231",
    "section": "",
    "text": "WS20231\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n&lt;error/rlang_error&gt;\nError in `geom_point()`:\n! Problem while computing aesthetics.\nâ„¹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'time_elapsed' not found\n---\nBacktrace:\n     â–†\n  1. â”œâ”€base::tryCatch(...)\n  2. â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n  3. â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n  4. â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n  5. â”œâ”€base::print(combined_plot)\n  6. â””â”€patchwork:::print.patchwork(combined_plot)\n  7.   â””â”€patchwork:::build_patchwork(plot, plot$layout$guides %||% \"auto\")\n  8.     â””â”€base::lapply(x$plots, plot_table, guides = guides)\n  9.       â”œâ”€patchwork (local) FUN(X[[i]], ...)\n 10.       â””â”€patchwork:::plot_table.ggplot(X[[i]], ...)\n 11.         â””â”€ggplot2::ggplotGrob(x)\n 12.           â”œâ”€ggplot2::ggplot_gtable(ggplot_build(x))\n 13.           â”‚ â””â”€ggplot2:::attach_plot_env(data$plot$plot_env)\n 14.           â”‚   â””â”€base::options(ggplot2_plot_env = env)\n 15.           â”œâ”€ggplot2::ggplot_build(x)\n 16.           â””â”€ggplot2:::ggplot_build.ggplot(x)\n 17.             â””â”€ggplot2:::by_layer(...)\n 18.               â”œâ”€rlang::try_fetch(...)\n 19.               â”‚ â”œâ”€base::tryCatch(...)\n 20.               â”‚ â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n 21.               â”‚ â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 22.               â”‚ â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n 23.               â”‚ â””â”€base::withCallingHandlers(...)\n 24.               â””â”€ggplot2 (local) f(l = layers[[i]], d = data[[i]])\n 25.                 â””â”€l$compute_aesthetics(d, plot)\n 26.                   â””â”€ggplot2 (local) compute_aesthetics(..., self = self)\n 27.                     â””â”€base::lapply(aesthetics, eval_tidy, data = data, env = env)\n 28.                       â””â”€rlang (local) FUN(X[[i]], ...)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  4965 scans\n10: 4539 scans\n12: 5920 scans\n16: 3236 scans\n18: 3563 scans\n2:  1931 scans\n21/LK:  4504 scans\n22: 4141 scans\n24: 3523 scans\n3:  7923 scans\n7:  37 scans\n9:  5358 scans\n9.5:    7848 scans\nMR: 5168 scans\nWS: 4301 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 4965\n\n\n\n\n\n=== station: 10\n# scans: 4539\n\n\n\n\n\n=== station: 12\n# scans: 5920\n\n\n\n\n\n=== station: 16\n# scans: 3236\n\n\n\n\n\n=== station: 18\n# scans: 3563\n\n\n\n\n\n=== station: 2\n# scans: 1931\n\n\n\n\n\n=== station: 21/LK\n# scans: 4504\n\n\n\n\n\n=== station: 22\n# scans: 4141\n\n\n\n\n\n=== station: 24\n# scans: 3523\n\n\n\n\n\n=== station: 3\n# scans: 7923\n\n\n\n\n\n=== station: 7\n# scans: 37\n\n\n\n\n\n=== station: 9\n# scans: 5358\n\n\n\n\n\n=== station: 9.5\n# scans: 7848\n\n\n\n\n\n=== station: MR\n# scans: 5168\n\n\n\n\n\n=== station: WS\n# scans: 4301\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS19322.html",
    "href": "cruise_report/cruise_reports/WS19322.html",
    "title": "WS19322",
    "section": "",
    "text": "WS19322\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n&lt;error/rlang_error&gt;\nError in `geom_point()`:\n! Problem while computing aesthetics.\nâ„¹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'time_elapsed' not found\n---\nBacktrace:\n     â–†\n  1. â”œâ”€base::tryCatch(...)\n  2. â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n  3. â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n  4. â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n  5. â”œâ”€base::print(combined_plot)\n  6. â””â”€patchwork:::print.patchwork(combined_plot)\n  7.   â””â”€patchwork:::build_patchwork(plot, plot$layout$guides %||% \"auto\")\n  8.     â””â”€base::lapply(x$plots, plot_table, guides = guides)\n  9.       â”œâ”€patchwork (local) FUN(X[[i]], ...)\n 10.       â””â”€patchwork:::plot_table.ggplot(X[[i]], ...)\n 11.         â””â”€ggplot2::ggplotGrob(x)\n 12.           â”œâ”€ggplot2::ggplot_gtable(ggplot_build(x))\n 13.           â”‚ â””â”€ggplot2:::attach_plot_env(data$plot$plot_env)\n 14.           â”‚   â””â”€base::options(ggplot2_plot_env = env)\n 15.           â”œâ”€ggplot2::ggplot_build(x)\n 16.           â””â”€ggplot2:::ggplot_build.ggplot(x)\n 17.             â””â”€ggplot2:::by_layer(...)\n 18.               â”œâ”€rlang::try_fetch(...)\n 19.               â”‚ â”œâ”€base::tryCatch(...)\n 20.               â”‚ â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n 21.               â”‚ â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 22.               â”‚ â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n 23.               â”‚ â””â”€base::withCallingHandlers(...)\n 24.               â””â”€ggplot2 (local) f(l = layers[[i]], d = data[[i]])\n 25.                 â””â”€l$compute_aesthetics(d, plot)\n 26.                   â””â”€ggplot2 (local) compute_aesthetics(..., self = self)\n 27.                     â””â”€base::lapply(aesthetics, eval_tidy, data = data, env = env)\n 28.                       â””â”€rlang (local) FUN(X[[i]], ...)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 1405 scans\n12: 3553 scans\n16: 1311 scans\n18: 2238 scans\n2:  3900 scans\n21/LK:  3791 scans\n7:  2791 scans\n9:  3952 scans\n9.5:    8943 scans\nMR: 3729 scans\nWS: 4654 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1405\n\n\n\n\n\n=== station: 12\n# scans: 3553\n\n\n\n\n\n=== station: 16\n# scans: 1311\n\n\n\n\n\n=== station: 18\n# scans: 2238\n\n\n\n\n\n=== station: 2\n# scans: 3900\n\n\n\n\n\n=== station: 21/LK\n# scans: 3791\n\n\n\n\n\n=== station: 7\n# scans: 2791\n\n\n\n\n\n=== station: 9\n# scans: 3952\n\n\n\n\n\n=== station: 9.5\n# scans: 8943\n\n\n\n\n\n=== station: MR\n# scans: 3729\n\n\n\n\n\n=== station: WS\n# scans: 4654\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS19210.html",
    "href": "cruise_report/cruise_reports/WS19210.html",
    "title": "WS19210",
    "section": "",
    "text": "WS19210\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n&lt;error/rlang_error&gt;\nError in `geom_point()`:\n! Problem while computing aesthetics.\nâ„¹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'time_elapsed' not found\n---\nBacktrace:\n     â–†\n  1. â”œâ”€base::tryCatch(...)\n  2. â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n  3. â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n  4. â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n  5. â”œâ”€base::print(combined_plot)\n  6. â””â”€patchwork:::print.patchwork(combined_plot)\n  7.   â””â”€patchwork:::build_patchwork(plot, plot$layout$guides %||% \"auto\")\n  8.     â””â”€base::lapply(x$plots, plot_table, guides = guides)\n  9.       â”œâ”€patchwork (local) FUN(X[[i]], ...)\n 10.       â””â”€patchwork:::plot_table.ggplot(X[[i]], ...)\n 11.         â””â”€ggplot2::ggplotGrob(x)\n 12.           â”œâ”€ggplot2::ggplot_gtable(ggplot_build(x))\n 13.           â”‚ â””â”€ggplot2:::attach_plot_env(data$plot$plot_env)\n 14.           â”‚   â””â”€base::options(ggplot2_plot_env = env)\n 15.           â”œâ”€ggplot2::ggplot_build(x)\n 16.           â””â”€ggplot2:::ggplot_build.ggplot(x)\n 17.             â””â”€ggplot2:::by_layer(...)\n 18.               â”œâ”€rlang::try_fetch(...)\n 19.               â”‚ â”œâ”€base::tryCatch(...)\n 20.               â”‚ â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n 21.               â”‚ â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 22.               â”‚ â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n 23.               â”‚ â””â”€base::withCallingHandlers(...)\n 24.               â””â”€ggplot2 (local) f(l = layers[[i]], d = data[[i]])\n 25.                 â””â”€l$compute_aesthetics(d, plot)\n 26.                   â””â”€ggplot2 (local) compute_aesthetics(..., self = self)\n 27.                     â””â”€base::lapply(aesthetics, eval_tidy, data = data, env = env)\n 28.                       â””â”€rlang (local) FUN(X[[i]], ...)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 1805 scans\n12: 3731 scans\n16: 1501 scans\n18: 2418 scans\n2:  2813 scans\n21/LK:  4047 scans\n7:  2035 scans\n9:  2933 scans\n9.5:    12423 scans\nMR: 3888 scans\nWS: 2989 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1805\n\n\n\n\n\n=== station: 12\n# scans: 3731\n\n\n\n\n\n=== station: 16\n# scans: 1501\n\n\n\n\n\n=== station: 18\n# scans: 2418\n\n\n\n\n\n=== station: 2\n# scans: 2813\n\n\n\n\n\n=== station: 21/LK\n# scans: 4047\n\n\n\n\n\n=== station: 7\n# scans: 2035\n\n\n\n\n\n=== station: 9\n# scans: 2933\n\n\n\n\n\n=== station: 9.5\n# scans: 12423\n\n\n\n\n\n=== station: MR\n# scans: 3888\n\n\n\n\n\n=== station: WS\n# scans: 2989\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS19028.html",
    "href": "cruise_report/cruise_reports/WS19028.html",
    "title": "WS19028",
    "section": "",
    "text": "WS19028\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n&lt;error/rlang_error&gt;\nError in `geom_point()`:\n! Problem while computing aesthetics.\nâ„¹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'time_elapsed' not found\n---\nBacktrace:\n     â–†\n  1. â”œâ”€base::tryCatch(...)\n  2. â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n  3. â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n  4. â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n  5. â”œâ”€base::print(combined_plot)\n  6. â””â”€patchwork:::print.patchwork(combined_plot)\n  7.   â””â”€patchwork:::build_patchwork(plot, plot$layout$guides %||% \"auto\")\n  8.     â””â”€base::lapply(x$plots, plot_table, guides = guides)\n  9.       â”œâ”€patchwork (local) FUN(X[[i]], ...)\n 10.       â””â”€patchwork:::plot_table.ggplot(X[[i]], ...)\n 11.         â””â”€ggplot2::ggplotGrob(x)\n 12.           â”œâ”€ggplot2::ggplot_gtable(ggplot_build(x))\n 13.           â”‚ â””â”€ggplot2:::attach_plot_env(data$plot$plot_env)\n 14.           â”‚   â””â”€base::options(ggplot2_plot_env = env)\n 15.           â”œâ”€ggplot2::ggplot_build(x)\n 16.           â””â”€ggplot2:::ggplot_build.ggplot(x)\n 17.             â””â”€ggplot2:::by_layer(...)\n 18.               â”œâ”€rlang::try_fetch(...)\n 19.               â”‚ â”œâ”€base::tryCatch(...)\n 20.               â”‚ â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n 21.               â”‚ â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 22.               â”‚ â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n 23.               â”‚ â””â”€base::withCallingHandlers(...)\n 24.               â””â”€ggplot2 (local) f(l = layers[[i]], d = data[[i]])\n 25.                 â””â”€l$compute_aesthetics(d, plot)\n 26.                   â””â”€ggplot2 (local) compute_aesthetics(..., self = self)\n 27.                     â””â”€base::lapply(aesthetics, eval_tidy, data = data, env = env)\n 28.                       â””â”€rlang (local) FUN(X[[i]], ...)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n21/LK:  5988 scans\nMR: 4800 scans\nWS: 6333 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 21/LK\n# scans: 5988\n\n\n\n\n\n=== station: MR\n# scans: 4800\n\n\n\n\n\n=== station: WS\n# scans: 6333\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS18285.html",
    "href": "cruise_report/cruise_reports/WS18285.html",
    "title": "WS18285",
    "section": "",
    "text": "WS18285\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n&lt;error/rlang_error&gt;\nError in `geom_point()`:\n! Problem while computing aesthetics.\nâ„¹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'time_elapsed' not found\n---\nBacktrace:\n     â–†\n  1. â”œâ”€base::tryCatch(...)\n  2. â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n  3. â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n  4. â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n  5. â”œâ”€base::print(combined_plot)\n  6. â””â”€patchwork:::print.patchwork(combined_plot)\n  7.   â””â”€patchwork:::build_patchwork(plot, plot$layout$guides %||% \"auto\")\n  8.     â””â”€base::lapply(x$plots, plot_table, guides = guides)\n  9.       â”œâ”€patchwork (local) FUN(X[[i]], ...)\n 10.       â””â”€patchwork:::plot_table.ggplot(X[[i]], ...)\n 11.         â””â”€ggplot2::ggplotGrob(x)\n 12.           â”œâ”€ggplot2::ggplot_gtable(ggplot_build(x))\n 13.           â”‚ â””â”€ggplot2:::attach_plot_env(data$plot$plot_env)\n 14.           â”‚   â””â”€base::options(ggplot2_plot_env = env)\n 15.           â”œâ”€ggplot2::ggplot_build(x)\n 16.           â””â”€ggplot2:::ggplot_build.ggplot(x)\n 17.             â””â”€ggplot2:::by_layer(...)\n 18.               â”œâ”€rlang::try_fetch(...)\n 19.               â”‚ â”œâ”€base::tryCatch(...)\n 20.               â”‚ â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n 21.               â”‚ â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 22.               â”‚ â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n 23.               â”‚ â””â”€base::withCallingHandlers(...)\n 24.               â””â”€ggplot2 (local) f(l = layers[[i]], d = data[[i]])\n 25.                 â””â”€l$compute_aesthetics(d, plot)\n 26.                   â””â”€ggplot2 (local) compute_aesthetics(..., self = self)\n 27.                     â””â”€base::lapply(aesthetics, eval_tidy, data = data, env = env)\n 28.                       â””â”€rlang (local) FUN(X[[i]], ...)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n16: 21 scans\n18: 5116 scans\n2:  4471 scans\n21.5:   9558 scans\n21/LK:  3933 scans\n24: 3634 scans\n9:  5319 scans\nMR: 5390 scans\nREDTIDE:    5113 scans\nWS: 2743 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 16\n# scans: 21\n\n\n\n\n\n=== station: 18\n# scans: 5116\n\n\n\n\n\n=== station: 2\n# scans: 4471\n\n\n\n\n\n=== station: 21.5\n# scans: 9558\n\n\n\n\n\n=== station: 21/LK\n# scans: 3933\n\n\n\n\n\n=== station: 24\n# scans: 3634\n\n\n\n\n\n=== station: 9\n# scans: 5319\n\n\n\n\n\n=== station: MR\n# scans: 5390\n\n\n\n\n\n=== station: REDTIDE\n# scans: 5113\n\n\n\n\n\n=== station: WS\n# scans: 2743\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS18120.html",
    "href": "cruise_report/cruise_reports/WS18120.html",
    "title": "WS18120",
    "section": "",
    "text": "WS18120\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n&lt;error/rlang_error&gt;\nError in `geom_point()`:\n! Problem while computing aesthetics.\nâ„¹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'time_elapsed' not found\n---\nBacktrace:\n     â–†\n  1. â”œâ”€base::tryCatch(...)\n  2. â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n  3. â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n  4. â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n  5. â”œâ”€base::print(combined_plot)\n  6. â””â”€patchwork:::print.patchwork(combined_plot)\n  7.   â””â”€patchwork:::build_patchwork(plot, plot$layout$guides %||% \"auto\")\n  8.     â””â”€base::lapply(x$plots, plot_table, guides = guides)\n  9.       â”œâ”€patchwork (local) FUN(X[[i]], ...)\n 10.       â””â”€patchwork:::plot_table.ggplot(X[[i]], ...)\n 11.         â””â”€ggplot2::ggplotGrob(x)\n 12.           â”œâ”€ggplot2::ggplot_gtable(ggplot_build(x))\n 13.           â”‚ â””â”€ggplot2:::attach_plot_env(data$plot$plot_env)\n 14.           â”‚   â””â”€base::options(ggplot2_plot_env = env)\n 15.           â”œâ”€ggplot2::ggplot_build(x)\n 16.           â””â”€ggplot2:::ggplot_build.ggplot(x)\n 17.             â””â”€ggplot2:::by_layer(...)\n 18.               â”œâ”€rlang::try_fetch(...)\n 19.               â”‚ â”œâ”€base::tryCatch(...)\n 20.               â”‚ â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n 21.               â”‚ â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 22.               â”‚ â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n 23.               â”‚ â””â”€base::withCallingHandlers(...)\n 24.               â””â”€ggplot2 (local) f(l = layers[[i]], d = data[[i]])\n 25.                 â””â”€l$compute_aesthetics(d, plot)\n 26.                   â””â”€ggplot2 (local) compute_aesthetics(..., self = self)\n 27.                     â””â”€base::lapply(aesthetics, eval_tidy, data = data, env = env)\n 28.                       â””â”€rlang (local) FUN(X[[i]], ...)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 1247 scans\n12: 4017 scans\n16: 858 scans\n18: 4870 scans\n2:  10334 scans\n21/LK:  4896 scans\n7:  467 scans\n9:  5451 scans\nMR: 8247 scans\nWS: 3768 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1247\n\n\n\n\n\n=== station: 12\n# scans: 4017\n\n\n\n\n\n=== station: 16\n# scans: 858\n\n\n\n\n\n=== station: 18\n# scans: 4870\n\n\n\n\n\n=== station: 2\n# scans: 10334\n\n\n\n\n\n=== station: 21/LK\n# scans: 4896\n\n\n\n\n\n=== station: 7\n# scans: 467\n\n\n\n\n\n=== station: 9\n# scans: 5451\n\n\n\n\n\n=== station: MR\n# scans: 8247\n\n\n\n\n\n=== station: WS\n# scans: 3768\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS17282.html",
    "href": "cruise_report/cruise_reports/WS17282.html",
    "title": "WS17282",
    "section": "",
    "text": "WS17282\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n&lt;error/rlang_error&gt;\nError in `geom_point()`:\n! Problem while computing aesthetics.\nâ„¹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'time_elapsed' not found\n---\nBacktrace:\n     â–†\n  1. â”œâ”€base::tryCatch(...)\n  2. â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n  3. â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n  4. â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n  5. â”œâ”€base::print(combined_plot)\n  6. â””â”€patchwork:::print.patchwork(combined_plot)\n  7.   â””â”€patchwork:::build_patchwork(plot, plot$layout$guides %||% \"auto\")\n  8.     â””â”€base::lapply(x$plots, plot_table, guides = guides)\n  9.       â”œâ”€patchwork (local) FUN(X[[i]], ...)\n 10.       â””â”€patchwork:::plot_table.ggplot(X[[i]], ...)\n 11.         â””â”€ggplot2::ggplotGrob(x)\n 12.           â”œâ”€ggplot2::ggplot_gtable(ggplot_build(x))\n 13.           â”‚ â””â”€ggplot2:::attach_plot_env(data$plot$plot_env)\n 14.           â”‚   â””â”€base::options(ggplot2_plot_env = env)\n 15.           â”œâ”€ggplot2::ggplot_build(x)\n 16.           â””â”€ggplot2:::ggplot_build.ggplot(x)\n 17.             â””â”€ggplot2:::by_layer(...)\n 18.               â”œâ”€rlang::try_fetch(...)\n 19.               â”‚ â”œâ”€base::tryCatch(...)\n 20.               â”‚ â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n 21.               â”‚ â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 22.               â”‚ â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n 23.               â”‚ â””â”€base::withCallingHandlers(...)\n 24.               â””â”€ggplot2 (local) f(l = layers[[i]], d = data[[i]])\n 25.                 â””â”€l$compute_aesthetics(d, plot)\n 26.                   â””â”€ggplot2 (local) compute_aesthetics(..., self = self)\n 27.                     â””â”€base::lapply(aesthetics, eval_tidy, data = data, env = env)\n 28.                       â””â”€rlang (local) FUN(X[[i]], ...)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  1755 scans\n10: 1362 scans\n11: 2933 scans\n12: 9813 scans\n13: 1778 scans\n14: 1890 scans\n15: 3059 scans\n15.5:   6654 scans\n16: 4118 scans\n17: 3437 scans\n18: 4434 scans\n19: 456 scans\n2:  1774 scans\n20: 1378 scans\n21.5:   8836 scans\n21/LK:  5419 scans\n22: 2002 scans\n22.5:   8683 scans\n23: 1122 scans\n24: 1295 scans\n3:  4900 scans\n5:  1197 scans\n6:  3324 scans\n6.5:    5446 scans\n7:  1159 scans\n8:  1287 scans\n9:  4059 scans\n9.5:    6707 scans\nEK_IN:  7 scans\nEK_OFF: 3020 scans\nMR: 6846 scans\nUK_IN:  1020 scans\nUK_OFF: 2542 scans\nWS: 2308 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 1755\n\n\n\n\n\n=== station: 10\n# scans: 1362\n\n\n\n\n\n=== station: 11\n# scans: 2933\n\n\n\n\n\n=== station: 12\n# scans: 9813\n\n\n\n\n\n=== station: 13\n# scans: 1778\n\n\n\n\n\n=== station: 14\n# scans: 1890\n\n\n\n\n\n=== station: 15\n# scans: 3059\n\n\n\n\n\n=== station: 15.5\n# scans: 6654\n\n\n\n\n\n=== station: 16\n# scans: 4118\n\n\n\n\n\n=== station: 17\n# scans: 3437\n\n\n\n\n\n=== station: 18\n# scans: 4434\n\n\n\n\n\n=== station: 19\n# scans: 456\n\n\n\n\n\n=== station: 2\n# scans: 1774\n\n\n\n\n\n=== station: 20\n# scans: 1378\n\n\n\n\n\n=== station: 21.5\n# scans: 8836\n\n\n\n\n\n=== station: 21/LK\n# scans: 5419\n\n\n\n\n\n=== station: 22\n# scans: 2002\n\n\n\n\n\n=== station: 22.5\n# scans: 8683\n\n\n\n\n\n=== station: 23\n# scans: 1122\n\n\n\n\n\n=== station: 24\n# scans: 1295\n\n\n\n\n\n=== station: 3\n# scans: 4900\n\n\n\n\n\n=== station: 5\n# scans: 1197\n\n\n\n\n\n=== station: 6\n# scans: 3324\n\n\n\n\n\n=== station: 6.5\n# scans: 5446\n\n\n\n\n\n=== station: 7\n# scans: 1159\n\n\n\n\n\n=== station: 8\n# scans: 1287\n\n\n\n\n\n=== station: 9\n# scans: 4059\n\n\n\n\n\n=== station: 9.5\n# scans: 6707\n\n\n\n\n\n=== station: EK_IN\n# scans: 7\n\n\n\n\n\n=== station: EK_OFF\n# scans: 3020\n\n\n\n\n\n=== station: MR\n# scans: 6846\n\n\n\n\n\n=== station: UK_IN\n# scans: 1020\n\n\n\n\n\n=== station: UK_OFF\n# scans: 2542\n\n\n\n\n\n=== station: WS\n# scans: 2308\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS17170.html",
    "href": "cruise_report/cruise_reports/WS17170.html",
    "title": "WS17170",
    "section": "",
    "text": "WS17170\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n&lt;error/rlang_error&gt;\nError in `geom_point()`:\n! Problem while computing aesthetics.\nâ„¹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'time_elapsed' not found\n---\nBacktrace:\n     â–†\n  1. â”œâ”€base::tryCatch(...)\n  2. â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n  3. â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n  4. â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n  5. â”œâ”€base::print(combined_plot)\n  6. â””â”€patchwork:::print.patchwork(combined_plot)\n  7.   â””â”€patchwork:::build_patchwork(plot, plot$layout$guides %||% \"auto\")\n  8.     â””â”€base::lapply(x$plots, plot_table, guides = guides)\n  9.       â”œâ”€patchwork (local) FUN(X[[i]], ...)\n 10.       â””â”€patchwork:::plot_table.ggplot(X[[i]], ...)\n 11.         â””â”€ggplot2::ggplotGrob(x)\n 12.           â”œâ”€ggplot2::ggplot_gtable(ggplot_build(x))\n 13.           â”‚ â””â”€ggplot2:::attach_plot_env(data$plot$plot_env)\n 14.           â”‚   â””â”€base::options(ggplot2_plot_env = env)\n 15.           â”œâ”€ggplot2::ggplot_build(x)\n 16.           â””â”€ggplot2:::ggplot_build.ggplot(x)\n 17.             â””â”€ggplot2:::by_layer(...)\n 18.               â”œâ”€rlang::try_fetch(...)\n 19.               â”‚ â”œâ”€base::tryCatch(...)\n 20.               â”‚ â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n 21.               â”‚ â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 22.               â”‚ â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n 23.               â”‚ â””â”€base::withCallingHandlers(...)\n 24.               â””â”€ggplot2 (local) f(l = layers[[i]], d = data[[i]])\n 25.                 â””â”€l$compute_aesthetics(d, plot)\n 26.                   â””â”€ggplot2 (local) compute_aesthetics(..., self = self)\n 27.                     â””â”€base::lapply(aesthetics, eval_tidy, data = data, env = env)\n 28.                       â””â”€rlang (local) FUN(X[[i]], ...)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 862 scans\n16: 222 scans\n21/LK:  3375 scans\n7:  1087 scans\nMR: 2718 scans\nWS: 2632 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 862\n\n\n\n\n\n=== station: 16\n# scans: 222\n\n\n\n\n\n=== station: 21/LK\n# scans: 3375\n\n\n\n\n\n=== station: 7\n# scans: 1087\n\n\n\n\n\n=== station: MR\n# scans: 2718\n\n\n\n\n\n=== station: WS\n# scans: 2632\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS17030.html",
    "href": "cruise_report/cruise_reports/WS17030.html",
    "title": "WS17030",
    "section": "",
    "text": "WS17030\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n&lt;error/rlang_error&gt;\nError in `geom_point()`:\n! Problem while computing aesthetics.\nâ„¹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'time_elapsed' not found\n---\nBacktrace:\n     â–†\n  1. â”œâ”€base::tryCatch(...)\n  2. â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n  3. â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n  4. â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n  5. â”œâ”€base::print(combined_plot)\n  6. â””â”€patchwork:::print.patchwork(combined_plot)\n  7.   â””â”€patchwork:::build_patchwork(plot, plot$layout$guides %||% \"auto\")\n  8.     â””â”€base::lapply(x$plots, plot_table, guides = guides)\n  9.       â”œâ”€patchwork (local) FUN(X[[i]], ...)\n 10.       â””â”€patchwork:::plot_table.ggplot(X[[i]], ...)\n 11.         â””â”€ggplot2::ggplotGrob(x)\n 12.           â”œâ”€ggplot2::ggplot_gtable(ggplot_build(x))\n 13.           â”‚ â””â”€ggplot2:::attach_plot_env(data$plot$plot_env)\n 14.           â”‚   â””â”€base::options(ggplot2_plot_env = env)\n 15.           â”œâ”€ggplot2::ggplot_build(x)\n 16.           â””â”€ggplot2:::ggplot_build.ggplot(x)\n 17.             â””â”€ggplot2:::by_layer(...)\n 18.               â”œâ”€rlang::try_fetch(...)\n 19.               â”‚ â”œâ”€base::tryCatch(...)\n 20.               â”‚ â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n 21.               â”‚ â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 22.               â”‚ â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n 23.               â”‚ â””â”€base::withCallingHandlers(...)\n 24.               â””â”€ggplot2 (local) f(l = layers[[i]], d = data[[i]])\n 25.                 â””â”€l$compute_aesthetics(d, plot)\n 26.                   â””â”€ggplot2 (local) compute_aesthetics(..., self = self)\n 27.                     â””â”€base::lapply(aesthetics, eval_tidy, data = data, env = env)\n 28.                       â””â”€rlang (local) FUN(X[[i]], ...)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 1371 scans\n12: 4943 scans\n16: 1732 scans\n18: 3093 scans\n2:  2543 scans\n21/LK:  7438 scans\n7:  1517 scans\n9:  3392 scans\n9.5:    8235 scans\nMR: 3832 scans\nWS: 3564 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1371\n\n\n\n\n\n=== station: 12\n# scans: 4943\n\n\n\n\n\n=== station: 16\n# scans: 1732\n\n\n\n\n\n=== station: 18\n# scans: 3093\n\n\n\n\n\n=== station: 2\n# scans: 2543\n\n\n\n\n\n=== station: 21/LK\n# scans: 7438\n\n\n\n\n\n=== station: 7\n# scans: 1517\n\n\n\n\n\n=== station: 9\n# scans: 3392\n\n\n\n\n\n=== station: 9.5\n# scans: 8235\n\n\n\n\n\n=== station: MR\n# scans: 3832\n\n\n\n\n\n=== station: WS\n# scans: 3564\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS16263.html",
    "href": "cruise_report/cruise_reports/WS16263.html",
    "title": "WS16263",
    "section": "",
    "text": "WS16263\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n&lt;error/rlang_error&gt;\nError in `geom_point()`:\n! Problem while computing aesthetics.\nâ„¹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'time_elapsed' not found\n---\nBacktrace:\n     â–†\n  1. â”œâ”€base::tryCatch(...)\n  2. â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n  3. â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n  4. â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n  5. â”œâ”€base::print(combined_plot)\n  6. â””â”€patchwork:::print.patchwork(combined_plot)\n  7.   â””â”€patchwork:::build_patchwork(plot, plot$layout$guides %||% \"auto\")\n  8.     â””â”€base::lapply(x$plots, plot_table, guides = guides)\n  9.       â”œâ”€patchwork (local) FUN(X[[i]], ...)\n 10.       â””â”€patchwork:::plot_table.ggplot(X[[i]], ...)\n 11.         â””â”€ggplot2::ggplotGrob(x)\n 12.           â”œâ”€ggplot2::ggplot_gtable(ggplot_build(x))\n 13.           â”‚ â””â”€ggplot2:::attach_plot_env(data$plot$plot_env)\n 14.           â”‚   â””â”€base::options(ggplot2_plot_env = env)\n 15.           â”œâ”€ggplot2::ggplot_build(x)\n 16.           â””â”€ggplot2:::ggplot_build.ggplot(x)\n 17.             â””â”€ggplot2:::by_layer(...)\n 18.               â”œâ”€rlang::try_fetch(...)\n 19.               â”‚ â”œâ”€base::tryCatch(...)\n 20.               â”‚ â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n 21.               â”‚ â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 22.               â”‚ â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n 23.               â”‚ â””â”€base::withCallingHandlers(...)\n 24.               â””â”€ggplot2 (local) f(l = layers[[i]], d = data[[i]])\n 25.                 â””â”€l$compute_aesthetics(d, plot)\n 26.                   â””â”€ggplot2 (local) compute_aesthetics(..., self = self)\n 27.                     â””â”€base::lapply(aesthetics, eval_tidy, data = data, env = env)\n 28.                       â””â”€rlang (local) FUN(X[[i]], ...)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  4836 scans\n10: 1695 scans\n12: 2855 scans\n16: 1963 scans\n18: 2560 scans\n21/LK:  3270 scans\n7:  853 scans\n9:  4327 scans\n9.5:    6607 scans\nMR: 1414 scans\nWS: 2434 scans\nWSB:    168 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 4836\n\n\n\n\n\n=== station: 10\n# scans: 1695\n\n\n\n\n\n=== station: 12\n# scans: 2855\n\n\n\n\n\n=== station: 16\n# scans: 1963\n\n\n\n\n\n=== station: 18\n# scans: 2560\n\n\n\n\n\n=== station: 21/LK\n# scans: 3270\n\n\n\n\n\n=== station: 7\n# scans: 853\n\n\n\n\n\n=== station: 9\n# scans: 4327\n\n\n\n\n\n=== station: 9.5\n# scans: 6607\n\n\n\n\n\n=== station: MR\n# scans: 1414\n\n\n\n\n\n=== station: WS\n# scans: 2434\n\n\n\n\n\n=== station: WSB\n# scans: 168\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS16074.html",
    "href": "cruise_report/cruise_reports/WS16074.html",
    "title": "WS16074",
    "section": "",
    "text": "WS16074\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n&lt;error/rlang_error&gt;\nError in `geom_point()`:\n! Problem while computing aesthetics.\nâ„¹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'time_elapsed' not found\n---\nBacktrace:\n     â–†\n  1. â”œâ”€base::tryCatch(...)\n  2. â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n  3. â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n  4. â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n  5. â”œâ”€base::print(combined_plot)\n  6. â””â”€patchwork:::print.patchwork(combined_plot)\n  7.   â””â”€patchwork:::build_patchwork(plot, plot$layout$guides %||% \"auto\")\n  8.     â””â”€base::lapply(x$plots, plot_table, guides = guides)\n  9.       â”œâ”€patchwork (local) FUN(X[[i]], ...)\n 10.       â””â”€patchwork:::plot_table.ggplot(X[[i]], ...)\n 11.         â””â”€ggplot2::ggplotGrob(x)\n 12.           â”œâ”€ggplot2::ggplot_gtable(ggplot_build(x))\n 13.           â”‚ â””â”€ggplot2:::attach_plot_env(data$plot$plot_env)\n 14.           â”‚   â””â”€base::options(ggplot2_plot_env = env)\n 15.           â”œâ”€ggplot2::ggplot_build(x)\n 16.           â””â”€ggplot2:::ggplot_build.ggplot(x)\n 17.             â””â”€ggplot2:::by_layer(...)\n 18.               â”œâ”€rlang::try_fetch(...)\n 19.               â”‚ â”œâ”€base::tryCatch(...)\n 20.               â”‚ â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n 21.               â”‚ â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 22.               â”‚ â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n 23.               â”‚ â””â”€base::withCallingHandlers(...)\n 24.               â””â”€ggplot2 (local) f(l = layers[[i]], d = data[[i]])\n 25.                 â””â”€l$compute_aesthetics(d, plot)\n 26.                   â””â”€ggplot2 (local) compute_aesthetics(..., self = self)\n 27.                     â””â”€base::lapply(aesthetics, eval_tidy, data = data, env = env)\n 28.                       â””â”€rlang (local) FUN(X[[i]], ...)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 1737 scans\n12: 1747 scans\n16: 1179 scans\n18: 3305 scans\n2:  1784 scans\n21/LK:  4419 scans\n7:  74 scans\n9:  2583 scans\nMR: 3790 scans\nWS: 3206 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1737\n\n\n\n\n\n=== station: 12\n# scans: 1747\n\n\n\n\n\n=== station: 16\n# scans: 1179\n\n\n\n\n\n=== station: 18\n# scans: 3305\n\n\n\n\n\n=== station: 2\n# scans: 1784\n\n\n\n\n\n=== station: 21/LK\n# scans: 4419\n\n\n\n\n\n=== station: 7\n# scans: 74\n\n\n\n\n\n=== station: 9\n# scans: 2583\n\n\n\n\n\n=== station: MR\n# scans: 3790\n\n\n\n\n\n=== station: WS\n# scans: 3206\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS15320.html",
    "href": "cruise_report/cruise_reports/WS15320.html",
    "title": "WS15320",
    "section": "",
    "text": "WS15320\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n&lt;error/rlang_error&gt;\nError in `geom_point()`:\n! Problem while computing aesthetics.\nâ„¹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'time_elapsed' not found\n---\nBacktrace:\n     â–†\n  1. â”œâ”€base::tryCatch(...)\n  2. â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n  3. â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n  4. â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n  5. â”œâ”€base::print(combined_plot)\n  6. â””â”€patchwork:::print.patchwork(combined_plot)\n  7.   â””â”€patchwork:::build_patchwork(plot, plot$layout$guides %||% \"auto\")\n  8.     â””â”€base::lapply(x$plots, plot_table, guides = guides)\n  9.       â”œâ”€patchwork (local) FUN(X[[i]], ...)\n 10.       â””â”€patchwork:::plot_table.ggplot(X[[i]], ...)\n 11.         â””â”€ggplot2::ggplotGrob(x)\n 12.           â”œâ”€ggplot2::ggplot_gtable(ggplot_build(x))\n 13.           â”‚ â””â”€ggplot2:::attach_plot_env(data$plot$plot_env)\n 14.           â”‚   â””â”€base::options(ggplot2_plot_env = env)\n 15.           â”œâ”€ggplot2::ggplot_build(x)\n 16.           â””â”€ggplot2:::ggplot_build.ggplot(x)\n 17.             â””â”€ggplot2:::by_layer(...)\n 18.               â”œâ”€rlang::try_fetch(...)\n 19.               â”‚ â”œâ”€base::tryCatch(...)\n 20.               â”‚ â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n 21.               â”‚ â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 22.               â”‚ â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n 23.               â”‚ â””â”€base::withCallingHandlers(...)\n 24.               â””â”€ggplot2 (local) f(l = layers[[i]], d = data[[i]])\n 25.                 â””â”€l$compute_aesthetics(d, plot)\n 26.                   â””â”€ggplot2 (local) compute_aesthetics(..., self = self)\n 27.                     â””â”€base::lapply(aesthetics, eval_tidy, data = data, env = env)\n 28.                       â””â”€rlang (local) FUN(X[[i]], ...)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 1356 scans\n12: 2905 scans\n16: 1949 scans\n18: 3794 scans\n2:  3256 scans\n21/LK:  2750 scans\n9.5:    7813 scans\nMR: 3019 scans\nWS: 2699 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1356\n\n\n\n\n\n=== station: 12\n# scans: 2905\n\n\n\n\n\n=== station: 16\n# scans: 1949\n\n\n\n\n\n=== station: 18\n# scans: 3794\n\n\n\n\n\n=== station: 2\n# scans: 3256\n\n\n\n\n\n=== station: 21/LK\n# scans: 2750\n\n\n\n\n\n=== station: 9.5\n# scans: 7813\n\n\n\n\n\n=== station: MR\n# scans: 3019\n\n\n\n\n\n=== station: WS\n# scans: 2699\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS15208.html",
    "href": "cruise_report/cruise_reports/WS15208.html",
    "title": "WS15208",
    "section": "",
    "text": "WS15208\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n&lt;error/rlang_error&gt;\nError in `geom_point()`:\n! Problem while computing aesthetics.\nâ„¹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'time_elapsed' not found\n---\nBacktrace:\n     â–†\n  1. â”œâ”€base::tryCatch(...)\n  2. â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n  3. â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n  4. â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n  5. â”œâ”€base::print(combined_plot)\n  6. â””â”€patchwork:::print.patchwork(combined_plot)\n  7.   â””â”€patchwork:::build_patchwork(plot, plot$layout$guides %||% \"auto\")\n  8.     â””â”€base::lapply(x$plots, plot_table, guides = guides)\n  9.       â”œâ”€patchwork (local) FUN(X[[i]], ...)\n 10.       â””â”€patchwork:::plot_table.ggplot(X[[i]], ...)\n 11.         â””â”€ggplot2::ggplotGrob(x)\n 12.           â”œâ”€ggplot2::ggplot_gtable(ggplot_build(x))\n 13.           â”‚ â””â”€ggplot2:::attach_plot_env(data$plot$plot_env)\n 14.           â”‚   â””â”€base::options(ggplot2_plot_env = env)\n 15.           â”œâ”€ggplot2::ggplot_build(x)\n 16.           â””â”€ggplot2:::ggplot_build.ggplot(x)\n 17.             â””â”€ggplot2:::by_layer(...)\n 18.               â”œâ”€rlang::try_fetch(...)\n 19.               â”‚ â”œâ”€base::tryCatch(...)\n 20.               â”‚ â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n 21.               â”‚ â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 22.               â”‚ â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n 23.               â”‚ â””â”€base::withCallingHandlers(...)\n 24.               â””â”€ggplot2 (local) f(l = layers[[i]], d = data[[i]])\n 25.                 â””â”€l$compute_aesthetics(d, plot)\n 26.                   â””â”€ggplot2 (local) compute_aesthetics(..., self = self)\n 27.                     â””â”€base::lapply(aesthetics, eval_tidy, data = data, env = env)\n 28.                       â””â”€rlang (local) FUN(X[[i]], ...)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 1783 scans\n12: 2403 scans\n15: 4028 scans\n15.5:   13409 scans\n16: 825 scans\n18: 3829 scans\n2:  3895 scans\n21.5:   8472 scans\n21/LK:  2914 scans\n22: 3826 scans\n6:  2434 scans\n7:  1389 scans\n9:  4182 scans\n9.5:    8605 scans\n9.6:    9783 scans\n9.7:    8709 scans\n9.8:    12744 scans\nMR: 2230 scans\nWS: 4073 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1783\n\n\n\n\n\n=== station: 12\n# scans: 2403\n\n\n\n\n\n=== station: 15\n# scans: 4028\n\n\n\n\n\n=== station: 15.5\n# scans: 13409\n\n\n\n\n\n=== station: 16\n# scans: 825\n\n\n\n\n\n=== station: 18\n# scans: 3829\n\n\n\n\n\n=== station: 2\n# scans: 3895\n\n\n\n\n\n=== station: 21.5\n# scans: 8472\n\n\n\n\n\n=== station: 21/LK\n# scans: 2914\n\n\n\n\n\n=== station: 22\n# scans: 3826\n\n\n\n\n\n=== station: 6\n# scans: 2434\n\n\n\n\n\n=== station: 7\n# scans: 1389\n\n\n\n\n\n=== station: 9\n# scans: 4182\n\n\n\n\n\n=== station: 9.5\n# scans: 8605\n\n\n\n\n\n=== station: 9.6\n# scans: 9783\n\n\n\n\n\n=== station: 9.7\n# scans: 8709\n\n\n\n\n\n=== station: 9.8\n# scans: 12744\n\n\n\n\n\n=== station: MR\n# scans: 2230\n\n\n\n\n\n=== station: WS\n# scans: 4073\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS15103.html",
    "href": "cruise_report/cruise_reports/WS15103.html",
    "title": "WS15103",
    "section": "",
    "text": "WS15103\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n16: 20 scans\n18: 3362 scans\n21/LK:  4572 scans\n3:  6814 scans\n7:  1971 scans\n8:  4401 scans\n9.5:    7321 scans\nMR: 1866 scans\nMRB:    1437 scans\nWS: 2458 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 16\n# scans: 20\n\n\n\n\n\n=== station: 18\n# scans: 3362\n\n\n\n\n\n=== station: 21/LK\n# scans: 4572\n\n\n\n\n\n=== station: 3\n# scans: 6814\n\n\n\n\n\n=== station: 7\n# scans: 1971\n\n\n\n\n\n=== station: 8\n# scans: 4401\n\n\n\n\n\n=== station: 9.5\n# scans: 7321\n\n\n\n\n\n=== station: MR\n# scans: 1866\n\n\n\n\n\n=== station: MRB\n# scans: 1437\n\n\n\n\n\n=== station: WS\n# scans: 2458\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS1212.html",
    "href": "cruise_report/cruise_reports/WS1212.html",
    "title": "WS1212",
    "section": "",
    "text": "WS1212\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  960 scans\n10: 630 scans\n12: 1794 scans\n16: 571 scans\n17: 1249 scans\n18: 2035 scans\n19: 431 scans\n20: 1761 scans\n21.5:   7173 scans\n22.5:   8273 scans\n23: 761 scans\n24: 1055 scans\n25.5:   11266 scans\n3:  3867 scans\n5:  599 scans\n6:  1882 scans\n6.5:    3105 scans\n7:  781 scans\n9:  3401 scans\n9.5:    6323 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 960\n\n\n\n\n\n=== station: 10\n# scans: 630\n\n\n\n\n\n=== station: 12\n# scans: 1794\n\n\n\n\n\n=== station: 16\n# scans: 571\n\n\n\n\n\n=== station: 17\n# scans: 1249\n\n\n\n\n\n=== station: 18\n# scans: 2035\n\n\n\n\n\n=== station: 19\n# scans: 431\n\n\n\n\n\n=== station: 20\n# scans: 1761\n\n\n\n\n\n=== station: 21.5\n# scans: 7173\n\n\n\n\n\n=== station: 22.5\n# scans: 8273\n\n\n\n\n\n=== station: 23\n# scans: 761\n\n\n\n\n\n=== station: 24\n# scans: 1055\n\n\n\n\n\n=== station: 25.5\n# scans: 11266\n\n\n\n\n\n=== station: 3\n# scans: 3867\n\n\n\n\n\n=== station: 5\n# scans: 599\n\n\n\n\n\n=== station: 6\n# scans: 1882\n\n\n\n\n\n=== station: 6.5\n# scans: 3105\n\n\n\n\n\n=== station: 7\n# scans: 781\n\n\n\n\n\n=== station: 9\n# scans: 3401\n\n\n\n\n\n=== station: 9.5\n# scans: 6323\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS1202.html",
    "href": "cruise_report/cruise_reports/WS1202.html",
    "title": "WS1202",
    "section": "",
    "text": "WS1202\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  832 scans\n10: 381 scans\n12: 2160 scans\n16: 1259 scans\n17: 1281 scans\n18: 1504 scans\n19: 770 scans\n20: 1140 scans\n21.5:   5818 scans\n22.5:   7181 scans\n23: 1259 scans\n24: 1206 scans\n25.5:   10745 scans\n3:  4302 scans\n4:  1241 scans\n5:  1012 scans\n6:  1312 scans\n6.5:    5401 scans\n7:  521 scans\n9:  2272 scans\n9.5:    6358 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 832\n\n\n\n\n\n=== station: 10\n# scans: 381\n\n\n\n\n\n=== station: 12\n# scans: 2160\n\n\n\n\n\n=== station: 16\n# scans: 1259\n\n\n\n\n\n=== station: 17\n# scans: 1281\n\n\n\n\n\n=== station: 18\n# scans: 1504\n\n\n\n\n\n=== station: 19\n# scans: 770\n\n\n\n\n\n=== station: 20\n# scans: 1140\n\n\n\n\n\n=== station: 21.5\n# scans: 5818\n\n\n\n\n\n=== station: 22.5\n# scans: 7181\n\n\n\n\n\n=== station: 23\n# scans: 1259\n\n\n\n\n\n=== station: 24\n# scans: 1206\n\n\n\n\n\n=== station: 25.5\n# scans: 10745\n\n\n\n\n\n=== station: 3\n# scans: 4302\n\n\n\n\n\n=== station: 4\n# scans: 1241\n\n\n\n\n\n=== station: 5\n# scans: 1012\n\n\n\n\n\n=== station: 6\n# scans: 1312\n\n\n\n\n\n=== station: 6.5\n# scans: 5401\n\n\n\n\n\n=== station: 7\n# scans: 521\n\n\n\n\n\n=== station: 9\n# scans: 2272\n\n\n\n\n\n=== station: 9.5\n# scans: 6358\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS1113.html",
    "href": "cruise_report/cruise_reports/WS1113.html",
    "title": "WS1113",
    "section": "",
    "text": "WS1113\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  1567 scans\n10: 1166 scans\n12: 2039 scans\n16: 2257 scans\n17: 1748 scans\n18: 7165 scans\n19: 1271 scans\n20: 1845 scans\n21.5:   7697 scans\n22.5:   7738 scans\n23: 1399 scans\n24: 2769 scans\n25.5:   7436 scans\n3:  7386 scans\n5:  3321 scans\n6:  2258 scans\n6.5:    4275 scans\n7:  496 scans\n9:  3095 scans\n9.5:    7422 scans\nMR1:    5231 scans\nMR2:    15913 scans\nMR3:    6635 scans\nMR4:    3224 scans\nMR5:    7415 scans\nMR6:    9503 scans\nMR7:    8485 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 1567\n\n\n\n\n\n=== station: 10\n# scans: 1166\n\n\n\n\n\n=== station: 12\n# scans: 2039\n\n\n\n\n\n=== station: 16\n# scans: 2257\n\n\n\n\n\n=== station: 17\n# scans: 1748\n\n\n\n\n\n=== station: 18\n# scans: 7165\n\n\n\n\n\n=== station: 19\n# scans: 1271\n\n\n\n\n\n=== station: 20\n# scans: 1845\n\n\n\n\n\n=== station: 21.5\n# scans: 7697\n\n\n\n\n\n=== station: 22.5\n# scans: 7738\n\n\n\n\n\n=== station: 23\n# scans: 1399\n\n\n\n\n\n=== station: 24\n# scans: 2769\n\n\n\n\n\n=== station: 25.5\n# scans: 7436\n\n\n\n\n\n=== station: 3\n# scans: 7386\n\n\n\n\n\n=== station: 5\n# scans: 3321\n\n\n\n\n\n=== station: 6\n# scans: 2258\n\n\n\n\n\n=== station: 6.5\n# scans: 4275\n\n\n\n\n\n=== station: 7\n# scans: 496\n\n\n\n\n\n=== station: 9\n# scans: 3095\n\n\n\n\n\n=== station: 9.5\n# scans: 7422\n\n\n\n\n\n=== station: MR1\n# scans: 5231\n\n\n\n\n\n=== station: MR2\n# scans: 15913\n\n\n\n\n\n=== station: MR3\n# scans: 6635\n\n\n\n\n\n=== station: MR4\n# scans: 3224\n\n\n\n\n\n=== station: MR5\n# scans: 7415\n\n\n\n\n\n=== station: MR6\n# scans: 9503\n\n\n\n\n\n=== station: MR7\n# scans: 8485\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS1102.html",
    "href": "cruise_report/cruise_reports/WS1102.html",
    "title": "WS1102",
    "section": "",
    "text": "WS1102\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  3269 scans\n16: 1622 scans\n17: 3069 scans\n18: 2063 scans\n19: 738 scans\n20: 1260 scans\n21.5:   5507 scans\n22.5:   4914 scans\n23: 1831 scans\n24: 3167 scans\n25.5:   13047 scans\n3:  7964 scans\n6.5:    5481 scans\n7:  1107 scans\n9:  2737 scans\n9.5:    10626 scans\nDT9:    3518 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 3269\n\n\n\n\n\n=== station: 16\n# scans: 1622\n\n\n\n\n\n=== station: 17\n# scans: 3069\n\n\n\n\n\n=== station: 18\n# scans: 2063\n\n\n\n\n\n=== station: 19\n# scans: 738\n\n\n\n\n\n=== station: 20\n# scans: 1260\n\n\n\n\n\n=== station: 21.5\n# scans: 5507\n\n\n\n\n\n=== station: 22.5\n# scans: 4914\n\n\n\n\n\n=== station: 23\n# scans: 1831\n\n\n\n\n\n=== station: 24\n# scans: 3167\n\n\n\n\n\n=== station: 25.5\n# scans: 13047\n\n\n\n\n\n=== station: 3\n# scans: 7964\n\n\n\n\n\n=== station: 6.5\n# scans: 5481\n\n\n\n\n\n=== station: 7\n# scans: 1107\n\n\n\n\n\n=== station: 9\n# scans: 2737\n\n\n\n\n\n=== station: 9.5\n# scans: 10626\n\n\n\n\n\n=== station: DT9\n# scans: 3518\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS1015.html",
    "href": "cruise_report/cruise_reports/WS1015.html",
    "title": "WS1015",
    "section": "",
    "text": "WS1015\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  5369 scans\n10: 1998 scans\n11: 1886 scans\n12: 2960 scans\n13: 1628 scans\n15: 4617 scans\n15.5:   7497 scans\n16: 2304 scans\n17: 2897 scans\n18: 2380 scans\n19: 31 scans\n20: 1116 scans\n21.5:   6540 scans\n21/LK:  3994 scans\n22: 1917 scans\n22.5:   6711 scans\n23: 797 scans\n24: 706 scans\n3:  6512 scans\n4:  37 scans\n5:  37 scans\n6:  3301 scans\n6.5:    6410 scans\n7:  2499 scans\n8:  2763 scans\n9.5:    6010 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 5369\n\n\n\n\n\n=== station: 10\n# scans: 1998\n\n\n\n\n\n=== station: 11\n# scans: 1886\n\n\n\n\n\n=== station: 12\n# scans: 2960\n\n\n\n\n\n=== station: 13\n# scans: 1628\n\n\n\n\n\n=== station: 15\n# scans: 4617\n\n\n\n\n\n=== station: 15.5\n# scans: 7497\n\n\n\n\n\n=== station: 16\n# scans: 2304\n\n\n\n\n\n=== station: 17\n# scans: 2897\n\n\n\n\n\n=== station: 18\n# scans: 2380\n\n\n\n\n\n=== station: 19\n# scans: 31\n\n\n\n\n\n=== station: 20\n# scans: 1116\n\n\n\n\n\n=== station: 21.5\n# scans: 6540\n\n\n\n\n\n=== station: 21/LK\n# scans: 3994\n\n\n\n\n\n=== station: 22\n# scans: 1917\n\n\n\n\n\n=== station: 22.5\n# scans: 6711\n\n\n\n\n\n=== station: 23\n# scans: 797\n\n\n\n\n\n=== station: 24\n# scans: 706\n\n\n\n\n\n=== station: 3\n# scans: 6512\n\n\n\n\n\n=== station: 4\n# scans: 37\n\n\n\n\n\n=== station: 5\n# scans: 37\n\n\n\n\n\n=== station: 6\n# scans: 3301\n\n\n\n\n\n=== station: 6.5\n# scans: 6410\n\n\n\n\n\n=== station: 7\n# scans: 2499\n\n\n\n\n\n=== station: 8\n# scans: 2763\n\n\n\n\n\n=== station: 9.5\n# scans: 6010\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS1004.html",
    "href": "cruise_report/cruise_reports/WS1004.html",
    "title": "WS1004",
    "section": "",
    "text": "WS1004\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  6581 scans\n10: 4302 scans\n12: 7041 scans\n16: 187 scans\n17: 2231 scans\n18: 3483 scans\n19: 255 scans\n21.5:   1569 scans\n21/LK:  3472 scans\n22.5:   17710 scans\n23: 4118 scans\n24: 2876 scans\n3:  10594 scans\n5:  3823 scans\n6:  7595 scans\n6.5:    6463 scans\n7:  3183 scans\n9:  7683 scans\n9.5:    9404 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 6581\n\n\n\n\n\n=== station: 10\n# scans: 4302\n\n\n\n\n\n=== station: 12\n# scans: 7041\n\n\n\n\n\n=== station: 16\n# scans: 187\n\n\n\n\n\n=== station: 17\n# scans: 2231\n\n\n\n\n\n=== station: 18\n# scans: 3483\n\n\n\n\n\n=== station: 19\n# scans: 255\n\n\n\n\n\n=== station: 21.5\n# scans: 1569\n\n\n\n\n\n=== station: 21/LK\n# scans: 3472\n\n\n\n\n\n=== station: 22.5\n# scans: 17710\n\n\n\n\n\n=== station: 23\n# scans: 4118\n\n\n\n\n\n=== station: 24\n# scans: 2876\n\n\n\n\n\n=== station: 3\n# scans: 10594\n\n\n\n\n\n=== station: 5\n# scans: 3823\n\n\n\n\n\n=== station: 6\n# scans: 7595\n\n\n\n\n\n=== station: 6.5\n# scans: 6463\n\n\n\n\n\n=== station: 7\n# scans: 3183\n\n\n\n\n\n=== station: 9\n# scans: 7683\n\n\n\n\n\n=== station: 9.5\n# scans: 9404\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS0919.html",
    "href": "cruise_report/cruise_reports/WS0919.html",
    "title": "WS0919",
    "section": "",
    "text": "WS0919\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  2127 scans\n10: 19 scans\n12: 4418 scans\n16: 1624 scans\n17: 1431 scans\n18: 2084 scans\n19: 6 scans\n21/LK:  2731 scans\n22.5:   8062 scans\n23: 3173 scans\n24: 2417 scans\n3:  4410 scans\n5:  2709 scans\n6:  5448 scans\n6.5:    5127 scans\n7:  18 scans\n9:  3563 scans\n9.5:    7055 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 2127\n\n\n\n\n\n=== station: 10\n# scans: 19\n\n\n\n\n\n=== station: 12\n# scans: 4418\n\n\n\n\n\n=== station: 16\n# scans: 1624\n\n\n\n\n\n=== station: 17\n# scans: 1431\n\n\n\n\n\n=== station: 18\n# scans: 2084\n\n\n\n\n\n=== station: 19\n# scans: 6\n\n\n\n\n\n=== station: 21/LK\n# scans: 2731\n\n\n\n\n\n=== station: 22.5\n# scans: 8062\n\n\n\n\n\n=== station: 23\n# scans: 3173\n\n\n\n\n\n=== station: 24\n# scans: 2417\n\n\n\n\n\n=== station: 3\n# scans: 4410\n\n\n\n\n\n=== station: 5\n# scans: 2709\n\n\n\n\n\n=== station: 6\n# scans: 5448\n\n\n\n\n\n=== station: 6.5\n# scans: 5127\n\n\n\n\n\n=== station: 7\n# scans: 18\n\n\n\n\n\n=== station: 9\n# scans: 3563\n\n\n\n\n\n=== station: 9.5\n# scans: 7055\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"unknown xtype value (\\\"5.780971\\\")\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"unknown xtype value (\\\"0.37876\\\")\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS0906.html",
    "href": "cruise_report/cruise_reports/WS0906.html",
    "title": "WS0906",
    "section": "",
    "text": "WS0906\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  2041 scans\n10: 2172 scans\n12: 4516 scans\n16: 1588 scans\n17: 2343 scans\n18: 3408 scans\n20.5:   3252 scans\n21.5:   9796 scans\n22.5:   7345 scans\n23: 3792 scans\n24: 3930 scans\n3:  6331 scans\n5.5:    1569 scans\n6.5:    5406 scans\n8:  1879 scans\n9.5:    8068 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 2041\n\n\n\n\n\n=== station: 10\n# scans: 2172\n\n\n\n\n\n=== station: 12\n# scans: 4516\n\n\n\n\n\n=== station: 16\n# scans: 1588\n\n\n\n\n\n=== station: 17\n# scans: 2343\n\n\n\n\n\n=== station: 18\n# scans: 3408\n\n\n\n\n\n=== station: 20.5\n# scans: 3252\n\n\n\n\n\n=== station: 21.5\n# scans: 9796\n\n\n\n\n\n=== station: 22.5\n# scans: 7345\n\n\n\n\n\n=== station: 23\n# scans: 3792\n\n\n\n\n\n=== station: 24\n# scans: 3930\n\n\n\n\n\n=== station: 3\n# scans: 6331\n\n\n\n\n\n=== station: 5.5\n# scans: 1569\n\n\n\n\n\n=== station: 6.5\n# scans: 5406\n\n\n\n\n\n=== station: 8\n# scans: 1879\n\n\n\n\n\n=== station: 9.5\n# scans: 8068\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS0807.html",
    "href": "cruise_report/cruise_reports/WS0807.html",
    "title": "WS0807",
    "section": "",
    "text": "WS0807\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 1003 scans\n12: 2095 scans\n16: 1235 scans\n17: 1377 scans\n18: 2011 scans\n19: 869 scans\n20: 1752 scans\n21.5:   7247 scans\n22.5:   7545 scans\n23: 1798 scans\n24: 1307 scans\n25.5:   15033 scans\n5:  2370 scans\n6:  4275 scans\n6.5:    5169 scans\n7:  1412 scans\n9:  3463 scans\n9.5:    7086 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1003\n\n\n\n\n\n=== station: 12\n# scans: 2095\n\n\n\n\n\n=== station: 16\n# scans: 1235\n\n\n\n\n\n=== station: 17\n# scans: 1377\n\n\n\n\n\n=== station: 18\n# scans: 2011\n\n\n\n\n\n=== station: 19\n# scans: 869\n\n\n\n\n\n=== station: 20\n# scans: 1752\n\n\n\n\n\n=== station: 21.5\n# scans: 7247\n\n\n\n\n\n=== station: 22.5\n# scans: 7545\n\n\n\n\n\n=== station: 23\n# scans: 1798\n\n\n\n\n\n=== station: 24\n# scans: 1307\n\n\n\n\n\n=== station: 25.5\n# scans: 15033\n\n\n\n\n\n=== station: 5\n# scans: 2370\n\n\n\n\n\n=== station: 6\n# scans: 4275\n\n\n\n\n\n=== station: 6.5\n# scans: 5169\n\n\n\n\n\n=== station: 7\n# scans: 1412\n\n\n\n\n\n=== station: 9\n# scans: 3463\n\n\n\n\n\n=== station: 9.5\n# scans: 7086\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS0718.html",
    "href": "cruise_report/cruise_reports/WS0718.html",
    "title": "WS0718",
    "section": "",
    "text": "WS0718\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  2955 scans\n10: 2156 scans\n16: 3419 scans\n17: 1539 scans\n18: 2 scans\n19: 2954 scans\n20: 2659 scans\n21.5:   8735 scans\n22.5:   10486 scans\n23: 1611 scans\n24: 2410 scans\n25.5:   12776 scans\n3:  3513 scans\n5:  1845 scans\n6:  1286 scans\n6.5:    5128 scans\n7:  2006 scans\n9:  3611 scans\n9.5:    8684 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 2955\n\n\n\n\n\n=== station: 10\n# scans: 2156\n\n\n\n\n\n=== station: 16\n# scans: 3419\n\n\n\n\n\n=== station: 17\n# scans: 1539\n\n\n\n\n\n=== station: 18\n# scans: 2\n\n\n\n\n\n=== station: 19\n# scans: 2954\n\n\n\n\n\n=== station: 20\n# scans: 2659\n\n\n\n\n\n=== station: 21.5\n# scans: 8735\n\n\n\n\n\n=== station: 22.5\n# scans: 10486\n\n\n\n\n\n=== station: 23\n# scans: 1611\n\n\n\n\n\n=== station: 24\n# scans: 2410\n\n\n\n\n\n=== station: 25.5\n# scans: 12776\n\n\n\n\n\n=== station: 3\n# scans: 3513\n\n\n\n\n\n=== station: 5\n# scans: 1845\n\n\n\n\n\n=== station: 6\n# scans: 1286\n\n\n\n\n\n=== station: 6.5\n# scans: 5128\n\n\n\n\n\n=== station: 7\n# scans: 2006\n\n\n\n\n\n=== station: 9\n# scans: 3611\n\n\n\n\n\n=== station: 9.5\n# scans: 8684\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS0623.html",
    "href": "cruise_report/cruise_reports/WS0623.html",
    "title": "WS0623",
    "section": "",
    "text": "WS0623\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\nRemoved 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\nWarning: Removed 4 rows containing missing values or values outside the scale range\n(`geom_col()`).\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 1584 scans\n16: 1410 scans\n17: 2397 scans\n18: 3917 scans\n19: 2042 scans\n20: 4840 scans\n23: 2119 scans\n24: 3548 scans\n3:  3694 scans\n5:  2060 scans\n6:  8525 scans\n6.5:    6130 scans\n7:  1585 scans\n9:  2713 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1584\n\n\n\n\n\n=== station: 16\n# scans: 1410\n\n\n\n\n\n=== station: 17\n# scans: 2397\n\n\n\n\n\n=== station: 18\n# scans: 3917\n\n\n\n\n\n=== station: 19\n# scans: 2042\n\n\n\n\n\n=== station: 20\n# scans: 4840\n\n\n\n\n\n=== station: 23\n# scans: 2119\n\n\n\n\n\n=== station: 24\n# scans: 3548\n\n\n\n\n\n=== station: 3\n# scans: 3694\n\n\n\n\n\n=== station: 5\n# scans: 2060\n\n\n\n\n\n=== station: 6\n# scans: 8525\n\n\n\n\n\n=== station: 6.5\n# scans: 6130\n\n\n\n\n\n=== station: 7\n# scans: 1585\n\n\n\n\n\n=== station: 9\n# scans: 2713\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS0612.html",
    "href": "cruise_report/cruise_reports/WS0612.html",
    "title": "WS0612",
    "section": "",
    "text": "WS0612\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  2163 scans\n10: 2343 scans\n11: 2428 scans\n12: 2949 scans\n13: 2431 scans\n14: 2227 scans\n15: 3413 scans\n15.5:   8025 scans\n16: 1565 scans\n17: 2178 scans\n18: 2990 scans\n19: 1720 scans\n2:  1723 scans\n20: 2174 scans\n21.5:   8665 scans\n21/LK:  2952 scans\n22: 3052 scans\n22.5:   7534 scans\n23: 1885 scans\n24: 2222 scans\n25: 4505 scans\n25.5:   13944 scans\n26: 1902 scans\n3:  4536 scans\n4:  1324 scans\n5:  1867 scans\n5.5:    1860 scans\n6:  2189 scans\n6.5:    7225 scans\n7:  1776 scans\n8:  2272 scans\n9:  3483 scans\n9.5:    7644 scans\nDT1:    3024 scans\nDT10:   2648 scans\nDT11:   2443 scans\nDT2:    2604 scans\nDT3:    4488 scans\nDT4:    5008 scans\nDT5:    4623 scans\nDT6:    8535 scans\nDT7:    19828 scans\nDT8:    9116 scans\nDT9:    4978 scans\nDTXX:   522 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 2163\n\n\n\n\n\n=== station: 10\n# scans: 2343\n\n\n\n\n\n=== station: 11\n# scans: 2428\n\n\n\n\n\n=== station: 12\n# scans: 2949\n\n\n\n\n\n=== station: 13\n# scans: 2431\n\n\n\n\n\n=== station: 14\n# scans: 2227\n\n\n\n\n\n=== station: 15\n# scans: 3413\n\n\n\n\n\n=== station: 15.5\n# scans: 8025\n\n\n\n\n\n=== station: 16\n# scans: 1565\n\n\n\n\n\n=== station: 17\n# scans: 2178\n\n\n\n\n\n=== station: 18\n# scans: 2990\n\n\n\n\n\n=== station: 19\n# scans: 1720\n\n\n\n\n\n=== station: 2\n# scans: 1723\n\n\n\n\n\n=== station: 20\n# scans: 2174\n\n\n\n\n\n=== station: 21.5\n# scans: 8665\n\n\n\n\n\n=== station: 21/LK\n# scans: 2952\n\n\n\n\n\n=== station: 22\n# scans: 3052\n\n\n\n\n\n=== station: 22.5\n# scans: 7534\n\n\n\n\n\n=== station: 23\n# scans: 1885\n\n\n\n\n\n=== station: 24\n# scans: 2222\n\n\n\n\n\n=== station: 25\n# scans: 4505\n\n\n\n\n\n=== station: 25.5\n# scans: 13944\n\n\n\n\n\n=== station: 26\n# scans: 1902\n\n\n\n\n\n=== station: 3\n# scans: 4536\n\n\n\n\n\n=== station: 4\n# scans: 1324\n\n\n\n\n\n=== station: 5\n# scans: 1867\n\n\n\n\n\n=== station: 5.5\n# scans: 1860\n\n\n\n\n\n=== station: 6\n# scans: 2189\n\n\n\n\n\n=== station: 6.5\n# scans: 7225\n\n\n\n\n\n=== station: 7\n# scans: 1776\n\n\n\n\n\n=== station: 8\n# scans: 2272\n\n\n\n\n\n=== station: 9\n# scans: 3483\n\n\n\n\n\n=== station: 9.5\n# scans: 7644\n\n\n\n\n\n=== station: DT1\n# scans: 3024\n\n\n\n\n\n=== station: DT10\n# scans: 2648\n\n\n\n\n\n=== station: DT11\n# scans: 2443\n\n\n\n\n\n=== station: DT2\n# scans: 2604\n\n\n\n\n\n=== station: DT3\n# scans: 4488\n\n\n\n\n\n=== station: DT4\n# scans: 5008\n\n\n\n\n\n=== station: DT5\n# scans: 4623\n\n\n\n\n\n=== station: DT6\n# scans: 8535\n\n\n\n\n\n=== station: DT7\n# scans: 19828\n\n\n\n\n\n=== station: DT8\n# scans: 9116\n\n\n\n\n\n=== station: DT9\n# scans: 4978\n\n\n\n\n\n=== station: DTXX\n# scans: 522\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/SAV18173.html",
    "href": "cruise_report/cruise_reports/SAV18173.html",
    "title": "SAV18173",
    "section": "",
    "text": "SAV18173\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 1942 scans\n12: 3517 scans\n16: 1830 scans\n18: 3016 scans\n2:  3761 scans\n21/LK:  3019 scans\n7:  154 scans\n9:  4899 scans\n9.5:    11806 scans\nMR: 1453 scans\nMR_REDO:    2342 scans\nWS: 2836 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1942\n\n\n\n\n\n=== station: 12\n# scans: 3517\n\n\n\n\n\n=== station: 16\n# scans: 1830\n\n\n\n\n\n=== station: 18\n# scans: 3016\n\n\n\n\n\n=== station: 2\n# scans: 3761\n\n\n\n\n\n=== station: 21/LK\n# scans: 3019\n\n\n\n\n\n=== station: 7\n# scans: 154\n\n\n\n\n\n=== station: 9\n# scans: 4899\n\n\n\n\n\n=== station: 9.5\n# scans: 11806\n\n\n\n\n\n=== station: MR\n# scans: 1453\n\n\n\n\n\n=== station: MR_REDO\n# scans: 2342\n\n\n\n\n\n=== station: WS\n# scans: 2836\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports.html",
    "href": "cruise_report/cruise_reports.html",
    "title": "Cruise Reports",
    "section": "",
    "text": "SAV1803\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSAV18173\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS0603\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS0612\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS0618\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS0623\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS0704\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS0718\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS0802\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS0807\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS0901\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS0906\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS0914\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS0919\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS0923\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS1004\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS1007\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS1015\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS1018\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS1102\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS1106\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS1113\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS1116\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS1202\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS1207\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS1212\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS1418\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS15103\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS15152\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS15208\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS15264\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS15320\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS16004\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS16074\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS16207\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS16263\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS16319\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS17030\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS17086\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS17170\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS17212\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS17282\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS18008\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS18120\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS18218\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS18285\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS18351\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS19028\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS19119\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS19210\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS19266\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS19322\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS20006\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS20231\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS20279\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS20342\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS21032\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS21093\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS21151\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS21212\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS21338\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS22022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS22072\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS22141\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS22215\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS22281\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS22337\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS23010\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWS23061\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "cruise_report/cruise_report_template.html",
    "href": "cruise_report/cruise_report_template.html",
    "title": "WS22072",
    "section": "",
    "text": "WS22072\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 89 scans\n12: 4880 scans\n16: 2678 scans\n18: 4330 scans\n2:  2592 scans\n21/LK:  5318 scans\n3:  4489 scans\n6.5:    7772 scans\n7:  2435 scans\n9:  4631 scans\n9.5:    9529 scans\nEK_IN:  2736 scans\nEK_MID: 2583 scans\nEK_OFF: 4189 scans\nMR: 5130 scans\nWS: 4022 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 89\n\n\n\n\n\n=== station: 12\n# scans: 4880\n\n\n\n\n\n=== station: 16\n# scans: 2678\n\n\n\n\n\n=== station: 18\n# scans: 4330\n\n\n\n\n\n=== station: 2\n# scans: 2592\n\n\n\n\n\n=== station: 21/LK\n# scans: 5318\n\n\n\n\n\n=== station: 3\n# scans: 4489\n\n\n\n\n\n=== station: 6.5\n# scans: 7772\n\n\n\n\n\n=== station: 7\n# scans: 2435\n\n\n\n\n\n=== station: 9\n# scans: 4631\n\n\n\n\n\n=== station: 9.5\n# scans: 9529\n\n\n\n\n\n=== station: EK_IN\n# scans: 2736\n\n\n\n\n\n=== station: EK_MID\n# scans: 2583\n\n\n\n\n\n=== station: EK_OFF\n# scans: 4189\n\n\n\n\n\n=== station: MR\n# scans: 5130\n\n\n\n\n\n=== station: WS\n# scans: 4022\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/SAV1803.html",
    "href": "cruise_report/cruise_reports/SAV1803.html",
    "title": "SAV1803",
    "section": "",
    "text": "SAV1803\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n12: 4471 scans\n17: 3475 scans\n18: 5410 scans\n2:  4547 scans\n21.5:   9899 scans\n21/LK:  3834 scans\n3:  5338 scans\n7:  2266 scans\n9:  4690 scans\n9.5:    9743 scans\nMR: 3576 scans\nMRV2:   102 scans\nWS: 1977 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 12\n# scans: 4471\n\n\n\n\n\n=== station: 17\n# scans: 3475\n\n\n\n\n\n=== station: 18\n# scans: 5410\n\n\n\n\n\n=== station: 2\n# scans: 4547\n\n\n\n\n\n=== station: 21.5\n# scans: 9899\n\n\n\n\n\n=== station: 21/LK\n# scans: 3834\n\n\n\n\n\n=== station: 3\n# scans: 5338\n\n\n\n\n\n=== station: 7\n# scans: 2266\n\n\n\n\n\n=== station: 9\n# scans: 4690\n\n\n\n\n\n=== station: 9.5\n# scans: 9743\n\n\n\n\n\n=== station: MR\n# scans: 3576\n\n\n\n\n\n=== station: MRV2\n# scans: 102\n\n\n\n\n\n=== station: WS\n# scans: 1977\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS0603.html",
    "href": "cruise_report/cruise_reports/WS0603.html",
    "title": "WS0603",
    "section": "",
    "text": "WS0603\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  2086 scans\n10: 1827 scans\n11: 1768 scans\n12: 3241 scans\n13: 2172 scans\n14: 3181 scans\n15: 3259 scans\n15.5:   7861 scans\n16: 1791 scans\n17: 2621 scans\n18: 2117 scans\n19: 1937 scans\n2:  2006 scans\n20: 2778 scans\n21.5:   8184 scans\n21/LK:  2913 scans\n22: 2327 scans\n22.5:   9177 scans\n23: 1942 scans\n24: 2294 scans\n25: 3841 scans\n25.5:   13714 scans\n26: 2765 scans\n3:  3574 scans\n4:  1851 scans\n5:  2053 scans\n5.5:    1616 scans\n6:  3416 scans\n6.5:    6731 scans\n7:  1920 scans\n8:  1780 scans\n9:  2711 scans\n9.5:    6632 scans\nDT1:    2896 scans\nDT10:   2393 scans\nDT11:   2415 scans\nDT2:    2883 scans\nDT3:    3973 scans\nDT4:    5743 scans\nDT5:    4618 scans\nDT6:    6878 scans\nDT7:    19101 scans\nDT8:    8860 scans\nDT9:    4512 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 2086\n\n\n\n\n\n=== station: 10\n# scans: 1827\n\n\n\n\n\n=== station: 11\n# scans: 1768\n\n\n\n\n\n=== station: 12\n# scans: 3241\n\n\n\n\n\n=== station: 13\n# scans: 2172\n\n\n\n\n\n=== station: 14\n# scans: 3181\n\n\n\n\n\n=== station: 15\n# scans: 3259\n\n\n\n\n\n=== station: 15.5\n# scans: 7861\n\n\n\n\n\n=== station: 16\n# scans: 1791\n\n\n\n\n\n=== station: 17\n# scans: 2621\n\n\n\n\n\n=== station: 18\n# scans: 2117\n\n\n\n\n\n=== station: 19\n# scans: 1937\n\n\n\n\n\n=== station: 2\n# scans: 2006\n\n\n\n\n\n=== station: 20\n# scans: 2778\n\n\n\n\n\n=== station: 21.5\n# scans: 8184\n\n\n\n\n\n=== station: 21/LK\n# scans: 2913\n\n\n\n\n\n=== station: 22\n# scans: 2327\n\n\n\n\n\n=== station: 22.5\n# scans: 9177\n\n\n\n\n\n=== station: 23\n# scans: 1942\n\n\n\n\n\n=== station: 24\n# scans: 2294\n\n\n\n\n\n=== station: 25\n# scans: 3841\n\n\n\n\n\n=== station: 25.5\n# scans: 13714\n\n\n\n\n\n=== station: 26\n# scans: 2765\n\n\n\n\n\n=== station: 3\n# scans: 3574\n\n\n\n\n\n=== station: 4\n# scans: 1851\n\n\n\n\n\n=== station: 5\n# scans: 2053\n\n\n\n\n\n=== station: 5.5\n# scans: 1616\n\n\n\n\n\n=== station: 6\n# scans: 3416\n\n\n\n\n\n=== station: 6.5\n# scans: 6731\n\n\n\n\n\n=== station: 7\n# scans: 1920\n\n\n\n\n\n=== station: 8\n# scans: 1780\n\n\n\n\n\n=== station: 9\n# scans: 2711\n\n\n\n\n\n=== station: 9.5\n# scans: 6632\n\n\n\n\n\n=== station: DT1\n# scans: 2896\n\n\n\n\n\n=== station: DT10\n# scans: 2393\n\n\n\n\n\n=== station: DT11\n# scans: 2415\n\n\n\n\n\n=== station: DT2\n# scans: 2883\n\n\n\n\n\n=== station: DT3\n# scans: 3973\n\n\n\n\n\n=== station: DT4\n# scans: 5743\n\n\n\n\n\n=== station: DT5\n# scans: 4618\n\n\n\n\n\n=== station: DT6\n# scans: 6878\n\n\n\n\n\n=== station: DT7\n# scans: 19101\n\n\n\n\n\n=== station: DT8\n# scans: 8860\n\n\n\n\n\n=== station: DT9\n# scans: 4512\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"the condition has length &gt; 1\"\n[1] \"the condition has length &gt; 1\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"the condition has length &gt; 1\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS0618.html",
    "href": "cruise_report/cruise_reports/WS0618.html",
    "title": "WS0618",
    "section": "",
    "text": "WS0618\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  2461 scans\n10: 1755 scans\n12: 2483 scans\n16: 2270 scans\n17: 3888 scans\n18: 3192 scans\n19: 2231 scans\n20: 3079 scans\n21.5:   8325 scans\n21/LK:  3863 scans\n22.5:   7788 scans\n23: 2471 scans\n24: 2205 scans\n25.5:   13216 scans\n3:  4005 scans\n5:  1789 scans\n6:  4260 scans\n6.5:    5552 scans\n7:  1656 scans\n9:  3349 scans\n9.5:    6905 scans\nDT1:    2752 scans\nDT10:   3314 scans\nDT11:   4356 scans\nDT2:    2072 scans\nDT4:    4815 scans\nDT7:    19906 scans\nDT9:    4678 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 2461\n\n\n\n\n\n=== station: 10\n# scans: 1755\n\n\n\n\n\n=== station: 12\n# scans: 2483\n\n\n\n\n\n=== station: 16\n# scans: 2270\n\n\n\n\n\n=== station: 17\n# scans: 3888\n\n\n\n\n\n=== station: 18\n# scans: 3192\n\n\n\n\n\n=== station: 19\n# scans: 2231\n\n\n\n\n\n=== station: 20\n# scans: 3079\n\n\n\n\n\n=== station: 21.5\n# scans: 8325\n\n\n\n\n\n=== station: 21/LK\n# scans: 3863\n\n\n\n\n\n=== station: 22.5\n# scans: 7788\n\n\n\n\n\n=== station: 23\n# scans: 2471\n\n\n\n\n\n=== station: 24\n# scans: 2205\n\n\n\n\n\n=== station: 25.5\n# scans: 13216\n\n\n\n\n\n=== station: 3\n# scans: 4005\n\n\n\n\n\n=== station: 5\n# scans: 1789\n\n\n\n\n\n=== station: 6\n# scans: 4260\n\n\n\n\n\n=== station: 6.5\n# scans: 5552\n\n\n\n\n\n=== station: 7\n# scans: 1656\n\n\n\n\n\n=== station: 9\n# scans: 3349\n\n\n\n\n\n=== station: 9.5\n# scans: 6905\n\n\n\n\n\n=== station: DT1\n# scans: 2752\n\n\n\n\n\n=== station: DT10\n# scans: 3314\n\n\n\n\n\n=== station: DT11\n# scans: 4356\n\n\n\n\n\n=== station: DT2\n# scans: 2072\n\n\n\n\n\n=== station: DT4\n# scans: 4815\n\n\n\n\n\n=== station: DT7\n# scans: 19906\n\n\n\n\n\n=== station: DT9\n# scans: 4678\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS0704.html",
    "href": "cruise_report/cruise_reports/WS0704.html",
    "title": "WS0704",
    "section": "",
    "text": "WS0704\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_col()`).\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  1853 scans\n10: 2234 scans\n12: 2447 scans\n16: 2260 scans\n17: 1918 scans\n18: 2828 scans\n19: 1801 scans\n20: 3075 scans\n21.5:   7785 scans\n22.5:   8338 scans\n23: 2794 scans\n24: 3166 scans\n25.5:   14214 scans\n3:  3781 scans\n5:  1333 scans\n6:  3197 scans\n6.5:    3963 scans\n7:  1747 scans\n9:  3284 scans\n9.5:    5859 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 1853\n\n\n\n\n\n=== station: 10\n# scans: 2234\n\n\n\n\n\n=== station: 12\n# scans: 2447\n\n\n\n\n\n=== station: 16\n# scans: 2260\n\n\n\n\n\n=== station: 17\n# scans: 1918\n\n\n\n\n\n=== station: 18\n# scans: 2828\n\n\n\n\n\n=== station: 19\n# scans: 1801\n\n\n\n\n\n=== station: 20\n# scans: 3075\n\n\n\n\n\n=== station: 21.5\n# scans: 7785\n\n\n\n\n\n=== station: 22.5\n# scans: 8338\n\n\n\n\n\n=== station: 23\n# scans: 2794\n\n\n\n\n\n=== station: 24\n# scans: 3166\n\n\n\n\n\n=== station: 25.5\n# scans: 14214\n\n\n\n\n\n=== station: 3\n# scans: 3781\n\n\n\n\n\n=== station: 5\n# scans: 1333\n\n\n\n\n\n=== station: 6\n# scans: 3197\n\n\n\n\n\n=== station: 6.5\n# scans: 3963\n\n\n\n\n\n=== station: 7\n# scans: 1747\n\n\n\n\n\n=== station: 9\n# scans: 3284\n\n\n\n\n\n=== station: 9.5\n# scans: 5859\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"missing value where TRUE/FALSE needed\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"missing value where TRUE/FALSE needed\"\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS0802.html",
    "href": "cruise_report/cruise_reports/WS0802.html",
    "title": "WS0802",
    "section": "",
    "text": "WS0802\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  3878 scans\n10: 430 scans\n12: 3242 scans\n16: 1597 scans\n17: 3245 scans\n18: 3242 scans\n19: 3022 scans\n20: 2971 scans\n21.5:   7240 scans\n22.5:   5971 scans\n23: 2575 scans\n24: 2590 scans\n25.5:   12274 scans\n3:  5807 scans\n7:  1639 scans\n9:  3574 scans\n9.5:    5458 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 3878\n\n\n\n\n\n=== station: 10\n# scans: 430\n\n\n\n\n\n=== station: 12\n# scans: 3242\n\n\n\n\n\n=== station: 16\n# scans: 1597\n\n\n\n\n\n=== station: 17\n# scans: 3245\n\n\n\n\n\n=== station: 18\n# scans: 3242\n\n\n\n\n\n=== station: 19\n# scans: 3022\n\n\n\n\n\n=== station: 20\n# scans: 2971\n\n\n\n\n\n=== station: 21.5\n# scans: 7240\n\n\n\n\n\n=== station: 22.5\n# scans: 5971\n\n\n\n\n\n=== station: 23\n# scans: 2575\n\n\n\n\n\n=== station: 24\n# scans: 2590\n\n\n\n\n\n=== station: 25.5\n# scans: 12274\n\n\n\n\n\n=== station: 3\n# scans: 5807\n\n\n\n\n\n=== station: 7\n# scans: 1639\n\n\n\n\n\n=== station: 9\n# scans: 3574\n\n\n\n\n\n=== station: 9.5\n# scans: 5458\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS0901.html",
    "href": "cruise_report/cruise_reports/WS0901.html",
    "title": "WS0901",
    "section": "",
    "text": "WS0901\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  2904 scans\n10: 3854 scans\n12: 4659 scans\n16: 2680 scans\n17: 4954 scans\n18: 2431 scans\n19: 1817 scans\n2:  3195 scans\n20: 2617 scans\n21.5:   9376 scans\n22.5:   7665 scans\n23: 2189 scans\n24: 2178 scans\n25.5:   13391 scans\n3:  5446 scans\n5:  2457 scans\n6:  5278 scans\n6.5:    4952 scans\n7:  2460 scans\n9:  3560 scans\n9.5:    9219 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 2904\n\n\n\n\n\n=== station: 10\n# scans: 3854\n\n\n\n\n\n=== station: 12\n# scans: 4659\n\n\n\n\n\n=== station: 16\n# scans: 2680\n\n\n\n\n\n=== station: 17\n# scans: 4954\n\n\n\n\n\n=== station: 18\n# scans: 2431\n\n\n\n\n\n=== station: 19\n# scans: 1817\n\n\n\n\n\n=== station: 2\n# scans: 3195\n\n\n\n\n\n=== station: 20\n# scans: 2617\n\n\n\n\n\n=== station: 21.5\n# scans: 9376\n\n\n\n\n\n=== station: 22.5\n# scans: 7665\n\n\n\n\n\n=== station: 23\n# scans: 2189\n\n\n\n\n\n=== station: 24\n# scans: 2178\n\n\n\n\n\n=== station: 25.5\n# scans: 13391\n\n\n\n\n\n=== station: 3\n# scans: 5446\n\n\n\n\n\n=== station: 5\n# scans: 2457\n\n\n\n\n\n=== station: 6\n# scans: 5278\n\n\n\n\n\n=== station: 6.5\n# scans: 4952\n\n\n\n\n\n=== station: 7\n# scans: 2460\n\n\n\n\n\n=== station: 9\n# scans: 3560\n\n\n\n\n\n=== station: 9.5\n# scans: 9219\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS0914.html",
    "href": "cruise_report/cruise_reports/WS0914.html",
    "title": "WS0914",
    "section": "",
    "text": "WS0914\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 1451 scans\n12: 6463 scans\n16: 4035 scans\n17: 3270 scans\n18: 3132 scans\n19: 3385 scans\n20.5:   6720 scans\n22.5:   9180 scans\n23: 1891 scans\n24: 3845 scans\n3:  5824 scans\n6:  4001 scans\n7:  209 scans\n9:  4926 scans\n9.5:    10269 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1451\n\n\n\n\n\n=== station: 12\n# scans: 6463\n\n\n\n\n\n=== station: 16\n# scans: 4035\n\n\n\n\n\n=== station: 17\n# scans: 3270\n\n\n\n\n\n=== station: 18\n# scans: 3132\n\n\n\n\n\n=== station: 19\n# scans: 3385\n\n\n\n\n\n=== station: 20.5\n# scans: 6720\n\n\n\n\n\n=== station: 22.5\n# scans: 9180\n\n\n\n\n\n=== station: 23\n# scans: 1891\n\n\n\n\n\n=== station: 24\n# scans: 3845\n\n\n\n\n\n=== station: 3\n# scans: 5824\n\n\n\n\n\n=== station: 6\n# scans: 4001\n\n\n\n\n\n=== station: 7\n# scans: 209\n\n\n\n\n\n=== station: 9\n# scans: 4926\n\n\n\n\n\n=== station: 9.5\n# scans: 10269\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS0923.html",
    "href": "cruise_report/cruise_reports/WS0923.html",
    "title": "WS0923",
    "section": "",
    "text": "WS0923\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  4544 scans\n10: 2163 scans\n12: 4926 scans\n16: 2431 scans\n17: 3044 scans\n18: 2966 scans\n19: 2169 scans\n21.5:   9374 scans\n21/LK:  5143 scans\n22.5:   6579 scans\n23: 2563 scans\n24: 2263 scans\n3:  5876 scans\n5:  1689 scans\n6:  3329 scans\n6.5:    6568 scans\n7:  3203 scans\n9:  3307 scans\n9.5:    8417 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 4544\n\n\n\n\n\n=== station: 10\n# scans: 2163\n\n\n\n\n\n=== station: 12\n# scans: 4926\n\n\n\n\n\n=== station: 16\n# scans: 2431\n\n\n\n\n\n=== station: 17\n# scans: 3044\n\n\n\n\n\n=== station: 18\n# scans: 2966\n\n\n\n\n\n=== station: 19\n# scans: 2169\n\n\n\n\n\n=== station: 21.5\n# scans: 9374\n\n\n\n\n\n=== station: 21/LK\n# scans: 5143\n\n\n\n\n\n=== station: 22.5\n# scans: 6579\n\n\n\n\n\n=== station: 23\n# scans: 2563\n\n\n\n\n\n=== station: 24\n# scans: 2263\n\n\n\n\n\n=== station: 3\n# scans: 5876\n\n\n\n\n\n=== station: 5\n# scans: 1689\n\n\n\n\n\n=== station: 6\n# scans: 3329\n\n\n\n\n\n=== station: 6.5\n# scans: 6568\n\n\n\n\n\n=== station: 7\n# scans: 3203\n\n\n\n\n\n=== station: 9\n# scans: 3307\n\n\n\n\n\n=== station: 9.5\n# scans: 8417\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS1007.html",
    "href": "cruise_report/cruise_reports/WS1007.html",
    "title": "WS1007",
    "section": "",
    "text": "WS1007\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  4964 scans\n10: 2040 scans\n12: 2767 scans\n16: 1898 scans\n17: 3458 scans\n18: 4103 scans\n19: 2642 scans\n20: 2453 scans\n21.5:   9355 scans\n22.5:   9047 scans\n23: 1875 scans\n24: 1873 scans\n5:  3354 scans\n6:  3644 scans\n6.5:    7348 scans\n675:    9556 scans\n7:  1964 scans\n9:  4427 scans\n9.5:    7185 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 4964\n\n\n\n\n\n=== station: 10\n# scans: 2040\n\n\n\n\n\n=== station: 12\n# scans: 2767\n\n\n\n\n\n=== station: 16\n# scans: 1898\n\n\n\n\n\n=== station: 17\n# scans: 3458\n\n\n\n\n\n=== station: 18\n# scans: 4103\n\n\n\n\n\n=== station: 19\n# scans: 2642\n\n\n\n\n\n=== station: 20\n# scans: 2453\n\n\n\n\n\n=== station: 21.5\n# scans: 9355\n\n\n\n\n\n=== station: 22.5\n# scans: 9047\n\n\n\n\n\n=== station: 23\n# scans: 1875\n\n\n\n\n\n=== station: 24\n# scans: 1873\n\n\n\n\n\n=== station: 5\n# scans: 3354\n\n\n\n\n\n=== station: 6\n# scans: 3644\n\n\n\n\n\n=== station: 6.5\n# scans: 7348\n\n\n\n\n\n=== station: 675\n# scans: 9556\n\n\n\n\n\n=== station: 7\n# scans: 1964\n\n\n\n\n\n=== station: 9\n# scans: 4427\n\n\n\n\n\n=== station: 9.5\n# scans: 7185\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS1018.html",
    "href": "cruise_report/cruise_reports/WS1018.html",
    "title": "WS1018",
    "section": "",
    "text": "WS1018\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  2379 scans\n10: 567 scans\n12: 2073 scans\n16: 131 scans\n17: 1056 scans\n18: 1877 scans\n19: 680 scans\n20: 3091 scans\n21.5:   6724 scans\n22.5:   8825 scans\n23: 1057 scans\n24: 989 scans\n3:  3338 scans\n5:  2152 scans\n6:  4393 scans\n6.5:    4500 scans\n7:  130 scans\n8:  1560 scans\n9.5:    9735 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 2379\n\n\n\n\n\n=== station: 10\n# scans: 567\n\n\n\n\n\n=== station: 12\n# scans: 2073\n\n\n\n\n\n=== station: 16\n# scans: 131\n\n\n\n\n\n=== station: 17\n# scans: 1056\n\n\n\n\n\n=== station: 18\n# scans: 1877\n\n\n\n\n\n=== station: 19\n# scans: 680\n\n\n\n\n\n=== station: 20\n# scans: 3091\n\n\n\n\n\n=== station: 21.5\n# scans: 6724\n\n\n\n\n\n=== station: 22.5\n# scans: 8825\n\n\n\n\n\n=== station: 23\n# scans: 1057\n\n\n\n\n\n=== station: 24\n# scans: 989\n\n\n\n\n\n=== station: 3\n# scans: 3338\n\n\n\n\n\n=== station: 5\n# scans: 2152\n\n\n\n\n\n=== station: 6\n# scans: 4393\n\n\n\n\n\n=== station: 6.5\n# scans: 4500\n\n\n\n\n\n=== station: 7\n# scans: 130\n\n\n\n\n\n=== station: 8\n# scans: 1560\n\n\n\n\n\n=== station: 9.5\n# scans: 9735\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"plot.new has not been called yet\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS1106.html",
    "href": "cruise_report/cruise_reports/WS1106.html",
    "title": "WS1106",
    "section": "",
    "text": "WS1106\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  1580 scans\n10: 47 scans\n16: 117 scans\n17: 672 scans\n18: 1405 scans\n19: 637 scans\n20: 1072 scans\n21.5:   7743 scans\n22.5:   7190 scans\n23: 2153 scans\n24: 1642 scans\n25.5:   11768 scans\n3:  4294 scans\n6:  2103 scans\n6.5:    4498 scans\n7:  532 scans\n9:  2702 scans\n9.5:    6332 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 1580\n\n\n\n\n\n=== station: 10\n# scans: 47\n\n\n\n\n\n=== station: 16\n# scans: 117\n\n\n\n\n\n=== station: 17\n# scans: 672\n\n\n\n\n\n=== station: 18\n# scans: 1405\n\n\n\n\n\n=== station: 19\n# scans: 637\n\n\n\n\n\n=== station: 20\n# scans: 1072\n\n\n\n\n\n=== station: 21.5\n# scans: 7743\n\n\n\n\n\n=== station: 22.5\n# scans: 7190\n\n\n\n\n\n=== station: 23\n# scans: 2153\n\n\n\n\n\n=== station: 24\n# scans: 1642\n\n\n\n\n\n=== station: 25.5\n# scans: 11768\n\n\n\n\n\n=== station: 3\n# scans: 4294\n\n\n\n\n\n=== station: 6\n# scans: 2103\n\n\n\n\n\n=== station: 6.5\n# scans: 4498\n\n\n\n\n\n=== station: 7\n# scans: 532\n\n\n\n\n\n=== station: 9\n# scans: 2702\n\n\n\n\n\n=== station: 9.5\n# scans: 6332\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS1116.html",
    "href": "cruise_report/cruise_reports/WS1116.html",
    "title": "WS1116",
    "section": "",
    "text": "WS1116\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  935 scans\n10: 490 scans\n12: 2033 scans\n16: 546 scans\n17: 554 scans\n18: 2148 scans\n19: 1505 scans\n20: 1013 scans\n21.5:   6307 scans\n22.5:   6128 scans\n23: 1077 scans\n24: 1880 scans\n25.5:   11722 scans\n3:  4755 scans\n5:  1007 scans\n6:  2587 scans\n6.5:    3846 scans\n7:  304 scans\n9:  2831 scans\n9.5:    7238 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 935\n\n\n\n\n\n=== station: 10\n# scans: 490\n\n\n\n\n\n=== station: 12\n# scans: 2033\n\n\n\n\n\n=== station: 16\n# scans: 546\n\n\n\n\n\n=== station: 17\n# scans: 554\n\n\n\n\n\n=== station: 18\n# scans: 2148\n\n\n\n\n\n=== station: 19\n# scans: 1505\n\n\n\n\n\n=== station: 20\n# scans: 1013\n\n\n\n\n\n=== station: 21.5\n# scans: 6307\n\n\n\n\n\n=== station: 22.5\n# scans: 6128\n\n\n\n\n\n=== station: 23\n# scans: 1077\n\n\n\n\n\n=== station: 24\n# scans: 1880\n\n\n\n\n\n=== station: 25.5\n# scans: 11722\n\n\n\n\n\n=== station: 3\n# scans: 4755\n\n\n\n\n\n=== station: 5\n# scans: 1007\n\n\n\n\n\n=== station: 6\n# scans: 2587\n\n\n\n\n\n=== station: 6.5\n# scans: 3846\n\n\n\n\n\n=== station: 7\n# scans: 304\n\n\n\n\n\n=== station: 9\n# scans: 2831\n\n\n\n\n\n=== station: 9.5\n# scans: 7238\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS1207.html",
    "href": "cruise_report/cruise_reports/WS1207.html",
    "title": "WS1207",
    "section": "",
    "text": "WS1207\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  6229 scans\n10: 942 scans\n11: 5932 scans\n16: 2668 scans\n17: 2897 scans\n18: 3082 scans\n19: 600 scans\n20: 981 scans\n21.5:   6642 scans\n21/LK:  2 scans\n22.5:   6773 scans\n23: 1437 scans\n24: 2437 scans\n25.5:   10862 scans\n3:  4950 scans\n5:  1140 scans\n6:  4531 scans\n6.5:    4442 scans\n7:  3066 scans\n9:  2669 scans\n9.5:    7519 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 6229\n\n\n\n\n\n=== station: 10\n# scans: 942\n\n\n\n\n\n=== station: 11\n# scans: 5932\n\n\n\n\n\n=== station: 16\n# scans: 2668\n\n\n\n\n\n=== station: 17\n# scans: 2897\n\n\n\n\n\n=== station: 18\n# scans: 3082\n\n\n\n\n\n=== station: 19\n# scans: 600\n\n\n\n\n\n=== station: 20\n# scans: 981\n\n\n\n\n\n=== station: 21.5\n# scans: 6642\n\n\n\n\n\n=== station: 21/LK\n# scans: 2\n\n\n\n\n\n=== station: 22.5\n# scans: 6773\n\n\n\n\n\n=== station: 23\n# scans: 1437\n\n\n\n\n\n=== station: 24\n# scans: 2437\n\n\n\n\n\n=== station: 25.5\n# scans: 10862\n\n\n\n\n\n=== station: 3\n# scans: 4950\n\n\n\n\n\n=== station: 5\n# scans: 1140\n\n\n\n\n\n=== station: 6\n# scans: 4531\n\n\n\n\n\n=== station: 6.5\n# scans: 4442\n\n\n\n\n\n=== station: 7\n# scans: 3066\n\n\n\n\n\n=== station: 9\n# scans: 2669\n\n\n\n\n\n=== station: 9.5\n# scans: 7519\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS1418.html",
    "href": "cruise_report/cruise_reports/WS1418.html",
    "title": "WS1418",
    "section": "",
    "text": "WS1418\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 1158 scans\n3:  2133 scans\n7:  1076 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1158\n\n\n\n\n\n=== station: 3\n# scans: 2133\n\n\n\n\n\n=== station: 7\n# scans: 1076\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS15152.html",
    "href": "cruise_report/cruise_reports/WS15152.html",
    "title": "WS15152",
    "section": "",
    "text": "WS15152\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 1212 scans\n12: 2800 scans\n16: 63 scans\n18: 2888 scans\n2:  1334 scans\n21/LK:  3192 scans\n7:  1189 scans\n9:  3348 scans\n9.5:    9606 scans\nMR: 1600 scans\nWS: 2041 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1212\n\n\n\n\n\n=== station: 12\n# scans: 2800\n\n\n\n\n\n=== station: 16\n# scans: 63\n\n\n\n\n\n=== station: 18\n# scans: 2888\n\n\n\n\n\n=== station: 2\n# scans: 1334\n\n\n\n\n\n=== station: 21/LK\n# scans: 3192\n\n\n\n\n\n=== station: 7\n# scans: 1189\n\n\n\n\n\n=== station: 9\n# scans: 3348\n\n\n\n\n\n=== station: 9.5\n# scans: 9606\n\n\n\n\n\n=== station: MR\n# scans: 1600\n\n\n\n\n\n=== station: WS\n# scans: 2041\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS15264.html",
    "href": "cruise_report/cruise_reports/WS15264.html",
    "title": "WS15264",
    "section": "",
    "text": "WS15264\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n&lt;error/rlang_error&gt;\nError in `geom_point()`:\n! Problem while computing aesthetics.\nâ„¹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'time_elapsed' not found\n---\nBacktrace:\n     â–†\n  1. â”œâ”€base::tryCatch(...)\n  2. â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n  3. â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n  4. â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n  5. â”œâ”€base::print(combined_plot)\n  6. â””â”€patchwork:::print.patchwork(combined_plot)\n  7.   â””â”€patchwork:::build_patchwork(plot, plot$layout$guides %||% \"auto\")\n  8.     â””â”€base::lapply(x$plots, plot_table, guides = guides)\n  9.       â”œâ”€patchwork (local) FUN(X[[i]], ...)\n 10.       â””â”€patchwork:::plot_table.ggplot(X[[i]], ...)\n 11.         â””â”€ggplot2::ggplotGrob(x)\n 12.           â”œâ”€ggplot2::ggplot_gtable(ggplot_build(x))\n 13.           â”‚ â””â”€ggplot2:::attach_plot_env(data$plot$plot_env)\n 14.           â”‚   â””â”€base::options(ggplot2_plot_env = env)\n 15.           â”œâ”€ggplot2::ggplot_build(x)\n 16.           â””â”€ggplot2:::ggplot_build.ggplot(x)\n 17.             â””â”€ggplot2:::by_layer(...)\n 18.               â”œâ”€rlang::try_fetch(...)\n 19.               â”‚ â”œâ”€base::tryCatch(...)\n 20.               â”‚ â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n 21.               â”‚ â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 22.               â”‚ â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n 23.               â”‚ â””â”€base::withCallingHandlers(...)\n 24.               â””â”€ggplot2 (local) f(l = layers[[i]], d = data[[i]])\n 25.                 â””â”€l$compute_aesthetics(d, plot)\n 26.                   â””â”€ggplot2 (local) compute_aesthetics(..., self = self)\n 27.                     â””â”€base::lapply(aesthetics, eval_tidy, data = data, env = env)\n 28.                       â””â”€rlang (local) FUN(X[[i]], ...)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 1074 scans\n12: 2620 scans\n16: 598 scans\n18: 3180 scans\n2:  2386 scans\n21/LK:  4809 scans\n7:  1866 scans\n8:  520 scans\n9:  5189 scans\n9.5:    7040 scans\nMR: 1805 scans\nMRA:    1514 scans\nWS: 3999 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1074\n\n\n\n\n\n=== station: 12\n# scans: 2620\n\n\n\n\n\n=== station: 16\n# scans: 598\n\n\n\n\n\n=== station: 18\n# scans: 3180\n\n\n\n\n\n=== station: 2\n# scans: 2386\n\n\n\n\n\n=== station: 21/LK\n# scans: 4809\n\n\n\n\n\n=== station: 7\n# scans: 1866\n\n\n\n\n\n=== station: 8\n# scans: 520\n\n\n\n\n\n=== station: 9\n# scans: 5189\n\n\n\n\n\n=== station: 9.5\n# scans: 7040\n\n\n\n\n\n=== station: MR\n# scans: 1805\n\n\n\n\n\n=== station: MRA\n# scans: 1514\n\n\n\n\n\n=== station: WS\n# scans: 3999\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS16004.html",
    "href": "cruise_report/cruise_reports/WS16004.html",
    "title": "WS16004",
    "section": "",
    "text": "WS16004\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n&lt;error/rlang_error&gt;\nError in `geom_point()`:\n! Problem while computing aesthetics.\nâ„¹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'time_elapsed' not found\n---\nBacktrace:\n     â–†\n  1. â”œâ”€base::tryCatch(...)\n  2. â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n  3. â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n  4. â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n  5. â”œâ”€base::print(combined_plot)\n  6. â””â”€patchwork:::print.patchwork(combined_plot)\n  7.   â””â”€patchwork:::build_patchwork(plot, plot$layout$guides %||% \"auto\")\n  8.     â””â”€base::lapply(x$plots, plot_table, guides = guides)\n  9.       â”œâ”€patchwork (local) FUN(X[[i]], ...)\n 10.       â””â”€patchwork:::plot_table.ggplot(X[[i]], ...)\n 11.         â””â”€ggplot2::ggplotGrob(x)\n 12.           â”œâ”€ggplot2::ggplot_gtable(ggplot_build(x))\n 13.           â”‚ â””â”€ggplot2:::attach_plot_env(data$plot$plot_env)\n 14.           â”‚   â””â”€base::options(ggplot2_plot_env = env)\n 15.           â”œâ”€ggplot2::ggplot_build(x)\n 16.           â””â”€ggplot2:::ggplot_build.ggplot(x)\n 17.             â””â”€ggplot2:::by_layer(...)\n 18.               â”œâ”€rlang::try_fetch(...)\n 19.               â”‚ â”œâ”€base::tryCatch(...)\n 20.               â”‚ â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n 21.               â”‚ â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 22.               â”‚ â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n 23.               â”‚ â””â”€base::withCallingHandlers(...)\n 24.               â””â”€ggplot2 (local) f(l = layers[[i]], d = data[[i]])\n 25.                 â””â”€l$compute_aesthetics(d, plot)\n 26.                   â””â”€ggplot2 (local) compute_aesthetics(..., self = self)\n 27.                     â””â”€base::lapply(aesthetics, eval_tidy, data = data, env = env)\n 28.                       â””â”€rlang (local) FUN(X[[i]], ...)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  3866 scans\n10: 1586 scans\n12: 7040 scans\n16: 2386 scans\n18: 4662 scans\n21/LK:  4838 scans\n7:  1992 scans\n9:  12252 scans\n9.5:    19212 scans\nMR: 7898 scans\nWS: 5660 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 3866\n\n\n\n\n\n=== station: 10\n# scans: 1586\n\n\n\n\n\n=== station: 12\n# scans: 7040\n\n\n\n\n\n=== station: 16\n# scans: 2386\n\n\n\n\n\n=== station: 18\n# scans: 4662\n\n\n\n\n\n=== station: 21/LK\n# scans: 4838\n\n\n\n\n\n=== station: 7\n# scans: 1992\n\n\n\n\n\n=== station: 9\n# scans: 12252\n\n\n\n\n\n=== station: 9.5\n# scans: 19212\n\n\n\n\n\n=== station: MR\n# scans: 7898\n\n\n\n\n\n=== station: WS\n# scans: 5660\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS16207.html",
    "href": "cruise_report/cruise_reports/WS16207.html",
    "title": "WS16207",
    "section": "",
    "text": "WS16207\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n&lt;error/rlang_error&gt;\nError in `geom_point()`:\n! Problem while computing aesthetics.\nâ„¹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'time_elapsed' not found\n---\nBacktrace:\n     â–†\n  1. â”œâ”€base::tryCatch(...)\n  2. â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n  3. â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n  4. â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n  5. â”œâ”€base::print(combined_plot)\n  6. â””â”€patchwork:::print.patchwork(combined_plot)\n  7.   â””â”€patchwork:::build_patchwork(plot, plot$layout$guides %||% \"auto\")\n  8.     â””â”€base::lapply(x$plots, plot_table, guides = guides)\n  9.       â”œâ”€patchwork (local) FUN(X[[i]], ...)\n 10.       â””â”€patchwork:::plot_table.ggplot(X[[i]], ...)\n 11.         â””â”€ggplot2::ggplotGrob(x)\n 12.           â”œâ”€ggplot2::ggplot_gtable(ggplot_build(x))\n 13.           â”‚ â””â”€ggplot2:::attach_plot_env(data$plot$plot_env)\n 14.           â”‚   â””â”€base::options(ggplot2_plot_env = env)\n 15.           â”œâ”€ggplot2::ggplot_build(x)\n 16.           â””â”€ggplot2:::ggplot_build.ggplot(x)\n 17.             â””â”€ggplot2:::by_layer(...)\n 18.               â”œâ”€rlang::try_fetch(...)\n 19.               â”‚ â”œâ”€base::tryCatch(...)\n 20.               â”‚ â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n 21.               â”‚ â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 22.               â”‚ â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n 23.               â”‚ â””â”€base::withCallingHandlers(...)\n 24.               â””â”€ggplot2 (local) f(l = layers[[i]], d = data[[i]])\n 25.                 â””â”€l$compute_aesthetics(d, plot)\n 26.                   â””â”€ggplot2 (local) compute_aesthetics(..., self = self)\n 27.                     â””â”€base::lapply(aesthetics, eval_tidy, data = data, env = env)\n 28.                       â””â”€rlang (local) FUN(X[[i]], ...)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 3018 scans\n12: 4474 scans\n16: 1247 scans\n18: 3637 scans\n2:  2135 scans\n21/LK:  5047 scans\n7:  596 scans\n9:  3443 scans\n9.5:    9901 scans\nMR: 926 scans\nWS: 4162 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 3018\n\n\n\n\n\n=== station: 12\n# scans: 4474\n\n\n\n\n\n=== station: 16\n# scans: 1247\n\n\n\n\n\n=== station: 18\n# scans: 3637\n\n\n\n\n\n=== station: 2\n# scans: 2135\n\n\n\n\n\n=== station: 21/LK\n# scans: 5047\n\n\n\n\n\n=== station: 7\n# scans: 596\n\n\n\n\n\n=== station: 9\n# scans: 3443\n\n\n\n\n\n=== station: 9.5\n# scans: 9901\n\n\n\n\n\n=== station: MR\n# scans: 926\n\n\n\n\n\n=== station: WS\n# scans: 4162\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS16319.html",
    "href": "cruise_report/cruise_reports/WS16319.html",
    "title": "WS16319",
    "section": "",
    "text": "WS16319\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n&lt;error/rlang_error&gt;\nError in `geom_point()`:\n! Problem while computing aesthetics.\nâ„¹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'time_elapsed' not found\n---\nBacktrace:\n     â–†\n  1. â”œâ”€base::tryCatch(...)\n  2. â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n  3. â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n  4. â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n  5. â”œâ”€base::print(combined_plot)\n  6. â””â”€patchwork:::print.patchwork(combined_plot)\n  7.   â””â”€patchwork:::build_patchwork(plot, plot$layout$guides %||% \"auto\")\n  8.     â””â”€base::lapply(x$plots, plot_table, guides = guides)\n  9.       â”œâ”€patchwork (local) FUN(X[[i]], ...)\n 10.       â””â”€patchwork:::plot_table.ggplot(X[[i]], ...)\n 11.         â””â”€ggplot2::ggplotGrob(x)\n 12.           â”œâ”€ggplot2::ggplot_gtable(ggplot_build(x))\n 13.           â”‚ â””â”€ggplot2:::attach_plot_env(data$plot$plot_env)\n 14.           â”‚   â””â”€base::options(ggplot2_plot_env = env)\n 15.           â”œâ”€ggplot2::ggplot_build(x)\n 16.           â””â”€ggplot2:::ggplot_build.ggplot(x)\n 17.             â””â”€ggplot2:::by_layer(...)\n 18.               â”œâ”€rlang::try_fetch(...)\n 19.               â”‚ â”œâ”€base::tryCatch(...)\n 20.               â”‚ â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n 21.               â”‚ â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 22.               â”‚ â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n 23.               â”‚ â””â”€base::withCallingHandlers(...)\n 24.               â””â”€ggplot2 (local) f(l = layers[[i]], d = data[[i]])\n 25.                 â””â”€l$compute_aesthetics(d, plot)\n 26.                   â””â”€ggplot2 (local) compute_aesthetics(..., self = self)\n 27.                     â””â”€base::lapply(aesthetics, eval_tidy, data = data, env = env)\n 28.                       â””â”€rlang (local) FUN(X[[i]], ...)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 1562 scans\n12: 3689 scans\n16: 964 scans\n18: 3693 scans\n2:  2488 scans\n21/LK:  3614 scans\n7:  1112 scans\n9:  3246 scans\n9.5:    8296 scans\nMR: 3202 scans\nWS: 2444 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1562\n\n\n\n\n\n=== station: 12\n# scans: 3689\n\n\n\n\n\n=== station: 16\n# scans: 964\n\n\n\n\n\n=== station: 18\n# scans: 3693\n\n\n\n\n\n=== station: 2\n# scans: 2488\n\n\n\n\n\n=== station: 21/LK\n# scans: 3614\n\n\n\n\n\n=== station: 7\n# scans: 1112\n\n\n\n\n\n=== station: 9\n# scans: 3246\n\n\n\n\n\n=== station: 9.5\n# scans: 8296\n\n\n\n\n\n=== station: MR\n# scans: 3202\n\n\n\n\n\n=== station: WS\n# scans: 2444\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS17086.html",
    "href": "cruise_report/cruise_reports/WS17086.html",
    "title": "WS17086",
    "section": "",
    "text": "WS17086\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n&lt;error/rlang_error&gt;\nError in `geom_point()`:\n! Problem while computing aesthetics.\nâ„¹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'time_elapsed' not found\n---\nBacktrace:\n     â–†\n  1. â”œâ”€base::tryCatch(...)\n  2. â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n  3. â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n  4. â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n  5. â”œâ”€base::print(combined_plot)\n  6. â””â”€patchwork:::print.patchwork(combined_plot)\n  7.   â””â”€patchwork:::build_patchwork(plot, plot$layout$guides %||% \"auto\")\n  8.     â””â”€base::lapply(x$plots, plot_table, guides = guides)\n  9.       â”œâ”€patchwork (local) FUN(X[[i]], ...)\n 10.       â””â”€patchwork:::plot_table.ggplot(X[[i]], ...)\n 11.         â””â”€ggplot2::ggplotGrob(x)\n 12.           â”œâ”€ggplot2::ggplot_gtable(ggplot_build(x))\n 13.           â”‚ â””â”€ggplot2:::attach_plot_env(data$plot$plot_env)\n 14.           â”‚   â””â”€base::options(ggplot2_plot_env = env)\n 15.           â”œâ”€ggplot2::ggplot_build(x)\n 16.           â””â”€ggplot2:::ggplot_build.ggplot(x)\n 17.             â””â”€ggplot2:::by_layer(...)\n 18.               â”œâ”€rlang::try_fetch(...)\n 19.               â”‚ â”œâ”€base::tryCatch(...)\n 20.               â”‚ â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n 21.               â”‚ â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 22.               â”‚ â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n 23.               â”‚ â””â”€base::withCallingHandlers(...)\n 24.               â””â”€ggplot2 (local) f(l = layers[[i]], d = data[[i]])\n 25.                 â””â”€l$compute_aesthetics(d, plot)\n 26.                   â””â”€ggplot2 (local) compute_aesthetics(..., self = self)\n 27.                     â””â”€base::lapply(aesthetics, eval_tidy, data = data, env = env)\n 28.                       â””â”€rlang (local) FUN(X[[i]], ...)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 1866 scans\n12: 5284 scans\n16: 1726 scans\n18: 6000 scans\n2:  2027 scans\n21/LK:  3474 scans\n3:  4949 scans\n7:  1273 scans\n9:  5242 scans\n9.5:    15069 scans\nMR: 4462 scans\nMRA:    1380 scans\nWS: 2304 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1866\n\n\n\n\n\n=== station: 12\n# scans: 5284\n\n\n\n\n\n=== station: 16\n# scans: 1726\n\n\n\n\n\n=== station: 18\n# scans: 6000\n\n\n\n\n\n=== station: 2\n# scans: 2027\n\n\n\n\n\n=== station: 21/LK\n# scans: 3474\n\n\n\n\n\n=== station: 3\n# scans: 4949\n\n\n\n\n\n=== station: 7\n# scans: 1273\n\n\n\n\n\n=== station: 9\n# scans: 5242\n\n\n\n\n\n=== station: 9.5\n# scans: 15069\n\n\n\n\n\n=== station: MR\n# scans: 4462\n\n\n\n\n\n=== station: MRA\n# scans: 1380\n\n\n\n\n\n=== station: WS\n# scans: 2304\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS17212.html",
    "href": "cruise_report/cruise_reports/WS17212.html",
    "title": "WS17212",
    "section": "",
    "text": "WS17212\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n&lt;error/rlang_error&gt;\nError in `geom_point()`:\n! Problem while computing aesthetics.\nâ„¹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'time_elapsed' not found\n---\nBacktrace:\n     â–†\n  1. â”œâ”€base::tryCatch(...)\n  2. â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n  3. â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n  4. â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n  5. â”œâ”€base::print(combined_plot)\n  6. â””â”€patchwork:::print.patchwork(combined_plot)\n  7.   â””â”€patchwork:::build_patchwork(plot, plot$layout$guides %||% \"auto\")\n  8.     â””â”€base::lapply(x$plots, plot_table, guides = guides)\n  9.       â”œâ”€patchwork (local) FUN(X[[i]], ...)\n 10.       â””â”€patchwork:::plot_table.ggplot(X[[i]], ...)\n 11.         â””â”€ggplot2::ggplotGrob(x)\n 12.           â”œâ”€ggplot2::ggplot_gtable(ggplot_build(x))\n 13.           â”‚ â””â”€ggplot2:::attach_plot_env(data$plot$plot_env)\n 14.           â”‚   â””â”€base::options(ggplot2_plot_env = env)\n 15.           â”œâ”€ggplot2::ggplot_build(x)\n 16.           â””â”€ggplot2:::ggplot_build.ggplot(x)\n 17.             â””â”€ggplot2:::by_layer(...)\n 18.               â”œâ”€rlang::try_fetch(...)\n 19.               â”‚ â”œâ”€base::tryCatch(...)\n 20.               â”‚ â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n 21.               â”‚ â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 22.               â”‚ â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n 23.               â”‚ â””â”€base::withCallingHandlers(...)\n 24.               â””â”€ggplot2 (local) f(l = layers[[i]], d = data[[i]])\n 25.                 â””â”€l$compute_aesthetics(d, plot)\n 26.                   â””â”€ggplot2 (local) compute_aesthetics(..., self = self)\n 27.                     â””â”€base::lapply(aesthetics, eval_tidy, data = data, env = env)\n 28.                       â””â”€rlang (local) FUN(X[[i]], ...)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 1527 scans\n12: 3222 scans\n16: 457 scans\n18: 3459 scans\n2:  2107 scans\n21/LK:  1674 scans\n7:  2341 scans\n9:  3433 scans\n9.5:    7575 scans\nMR: 3933 scans\nWS: 2379 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1527\n\n\n\n\n\n=== station: 12\n# scans: 3222\n\n\n\n\n\n=== station: 16\n# scans: 457\n\n\n\n\n\n=== station: 18\n# scans: 3459\n\n\n\n\n\n=== station: 2\n# scans: 2107\n\n\n\n\n\n=== station: 21/LK\n# scans: 1674\n\n\n\n\n\n=== station: 7\n# scans: 2341\n\n\n\n\n\n=== station: 9\n# scans: 3433\n\n\n\n\n\n=== station: 9.5\n# scans: 7575\n\n\n\n\n\n=== station: MR\n# scans: 3933\n\n\n\n\n\n=== station: WS\n# scans: 2379\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS18008.html",
    "href": "cruise_report/cruise_reports/WS18008.html",
    "title": "WS18008",
    "section": "",
    "text": "WS18008\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n&lt;error/rlang_error&gt;\nError in `geom_point()`:\n! Problem while computing aesthetics.\nâ„¹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'time_elapsed' not found\n---\nBacktrace:\n     â–†\n  1. â”œâ”€base::tryCatch(...)\n  2. â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n  3. â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n  4. â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n  5. â”œâ”€base::print(combined_plot)\n  6. â””â”€patchwork:::print.patchwork(combined_plot)\n  7.   â””â”€patchwork:::build_patchwork(plot, plot$layout$guides %||% \"auto\")\n  8.     â””â”€base::lapply(x$plots, plot_table, guides = guides)\n  9.       â”œâ”€patchwork (local) FUN(X[[i]], ...)\n 10.       â””â”€patchwork:::plot_table.ggplot(X[[i]], ...)\n 11.         â””â”€ggplot2::ggplotGrob(x)\n 12.           â”œâ”€ggplot2::ggplot_gtable(ggplot_build(x))\n 13.           â”‚ â””â”€ggplot2:::attach_plot_env(data$plot$plot_env)\n 14.           â”‚   â””â”€base::options(ggplot2_plot_env = env)\n 15.           â”œâ”€ggplot2::ggplot_build(x)\n 16.           â””â”€ggplot2:::ggplot_build.ggplot(x)\n 17.             â””â”€ggplot2:::by_layer(...)\n 18.               â”œâ”€rlang::try_fetch(...)\n 19.               â”‚ â”œâ”€base::tryCatch(...)\n 20.               â”‚ â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n 21.               â”‚ â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 22.               â”‚ â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n 23.               â”‚ â””â”€base::withCallingHandlers(...)\n 24.               â””â”€ggplot2 (local) f(l = layers[[i]], d = data[[i]])\n 25.                 â””â”€l$compute_aesthetics(d, plot)\n 26.                   â””â”€ggplot2 (local) compute_aesthetics(..., self = self)\n 27.                     â””â”€base::lapply(aesthetics, eval_tidy, data = data, env = env)\n 28.                       â””â”€rlang (local) FUN(X[[i]], ...)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 2865 scans\n12: 2494 scans\n16: 1062 scans\n18: 3144 scans\n21/LK:  2104 scans\n7:  2228 scans\n9:  3379 scans\n9.5:    8463 scans\nMR: 2575 scans\nWS: 1735 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 2865\n\n\n\n\n\n=== station: 12\n# scans: 2494\n\n\n\n\n\n=== station: 16\n# scans: 1062\n\n\n\n\n\n=== station: 18\n# scans: 3144\n\n\n\n\n\n=== station: 21/LK\n# scans: 2104\n\n\n\n\n\n=== station: 7\n# scans: 2228\n\n\n\n\n\n=== station: 9\n# scans: 3379\n\n\n\n\n\n=== station: 9.5\n# scans: 8463\n\n\n\n\n\n=== station: MR\n# scans: 2575\n\n\n\n\n\n=== station: WS\n# scans: 1735\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS18218.html",
    "href": "cruise_report/cruise_reports/WS18218.html",
    "title": "WS18218",
    "section": "",
    "text": "WS18218\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n&lt;error/rlang_error&gt;\nError in `geom_point()`:\n! Problem while computing aesthetics.\nâ„¹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'time_elapsed' not found\n---\nBacktrace:\n     â–†\n  1. â”œâ”€base::tryCatch(...)\n  2. â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n  3. â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n  4. â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n  5. â”œâ”€base::print(combined_plot)\n  6. â””â”€patchwork:::print.patchwork(combined_plot)\n  7.   â””â”€patchwork:::build_patchwork(plot, plot$layout$guides %||% \"auto\")\n  8.     â””â”€base::lapply(x$plots, plot_table, guides = guides)\n  9.       â”œâ”€patchwork (local) FUN(X[[i]], ...)\n 10.       â””â”€patchwork:::plot_table.ggplot(X[[i]], ...)\n 11.         â””â”€ggplot2::ggplotGrob(x)\n 12.           â”œâ”€ggplot2::ggplot_gtable(ggplot_build(x))\n 13.           â”‚ â””â”€ggplot2:::attach_plot_env(data$plot$plot_env)\n 14.           â”‚   â””â”€base::options(ggplot2_plot_env = env)\n 15.           â”œâ”€ggplot2::ggplot_build(x)\n 16.           â””â”€ggplot2:::ggplot_build.ggplot(x)\n 17.             â””â”€ggplot2:::by_layer(...)\n 18.               â”œâ”€rlang::try_fetch(...)\n 19.               â”‚ â”œâ”€base::tryCatch(...)\n 20.               â”‚ â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n 21.               â”‚ â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 22.               â”‚ â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n 23.               â”‚ â””â”€base::withCallingHandlers(...)\n 24.               â””â”€ggplot2 (local) f(l = layers[[i]], d = data[[i]])\n 25.                 â””â”€l$compute_aesthetics(d, plot)\n 26.                   â””â”€ggplot2 (local) compute_aesthetics(..., self = self)\n 27.                     â””â”€base::lapply(aesthetics, eval_tidy, data = data, env = env)\n 28.                       â””â”€rlang (local) FUN(X[[i]], ...)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n2:  4168 scans\n7:  2496 scans\n9:  3963 scans\n9.5:    9735 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 2\n# scans: 4168\n\n\n\n\n\n=== station: 7\n# scans: 2496\n\n\n\n\n\n=== station: 9\n# scans: 3963\n\n\n\n\n\n=== station: 9.5\n# scans: 9735\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS18351.html",
    "href": "cruise_report/cruise_reports/WS18351.html",
    "title": "WS18351",
    "section": "",
    "text": "WS18351\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n&lt;error/rlang_error&gt;\nError in `geom_point()`:\n! Problem while computing aesthetics.\nâ„¹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'time_elapsed' not found\n---\nBacktrace:\n     â–†\n  1. â”œâ”€base::tryCatch(...)\n  2. â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n  3. â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n  4. â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n  5. â”œâ”€base::print(combined_plot)\n  6. â””â”€patchwork:::print.patchwork(combined_plot)\n  7.   â””â”€patchwork:::build_patchwork(plot, plot$layout$guides %||% \"auto\")\n  8.     â””â”€base::lapply(x$plots, plot_table, guides = guides)\n  9.       â”œâ”€patchwork (local) FUN(X[[i]], ...)\n 10.       â””â”€patchwork:::plot_table.ggplot(X[[i]], ...)\n 11.         â””â”€ggplot2::ggplotGrob(x)\n 12.           â”œâ”€ggplot2::ggplot_gtable(ggplot_build(x))\n 13.           â”‚ â””â”€ggplot2:::attach_plot_env(data$plot$plot_env)\n 14.           â”‚   â””â”€base::options(ggplot2_plot_env = env)\n 15.           â”œâ”€ggplot2::ggplot_build(x)\n 16.           â””â”€ggplot2:::ggplot_build.ggplot(x)\n 17.             â””â”€ggplot2:::by_layer(...)\n 18.               â”œâ”€rlang::try_fetch(...)\n 19.               â”‚ â”œâ”€base::tryCatch(...)\n 20.               â”‚ â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n 21.               â”‚ â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 22.               â”‚ â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n 23.               â”‚ â””â”€base::withCallingHandlers(...)\n 24.               â””â”€ggplot2 (local) f(l = layers[[i]], d = data[[i]])\n 25.                 â””â”€l$compute_aesthetics(d, plot)\n 26.                   â””â”€ggplot2 (local) compute_aesthetics(..., self = self)\n 27.                     â””â”€base::lapply(aesthetics, eval_tidy, data = data, env = env)\n 28.                       â””â”€rlang (local) FUN(X[[i]], ...)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 1403 scans\n12: 5118 scans\n16: 1790 scans\n18: 3868 scans\n2:  1658 scans\n21/LK:  4213 scans\n7:  1294 scans\n9:  4060 scans\n9.5:    18319 scans\nMR: 3900 scans\nWS: 3350 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1403\n\n\n\n\n\n=== station: 12\n# scans: 5118\n\n\n\n\n\n=== station: 16\n# scans: 1790\n\n\n\n\n\n=== station: 18\n# scans: 3868\n\n\n\n\n\n=== station: 2\n# scans: 1658\n\n\n\n\n\n=== station: 21/LK\n# scans: 4213\n\n\n\n\n\n=== station: 7\n# scans: 1294\n\n\n\n\n\n=== station: 9\n# scans: 4060\n\n\n\n\n\n=== station: 9.5\n# scans: 18319\n\n\n\n\n\n=== station: MR\n# scans: 3900\n\n\n\n\n\n=== station: WS\n# scans: 3350\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS19119.html",
    "href": "cruise_report/cruise_reports/WS19119.html",
    "title": "WS19119",
    "section": "",
    "text": "WS19119\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n&lt;error/rlang_error&gt;\nError in `geom_point()`:\n! Problem while computing aesthetics.\nâ„¹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'time_elapsed' not found\n---\nBacktrace:\n     â–†\n  1. â”œâ”€base::tryCatch(...)\n  2. â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n  3. â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n  4. â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n  5. â”œâ”€base::print(combined_plot)\n  6. â””â”€patchwork:::print.patchwork(combined_plot)\n  7.   â””â”€patchwork:::build_patchwork(plot, plot$layout$guides %||% \"auto\")\n  8.     â””â”€base::lapply(x$plots, plot_table, guides = guides)\n  9.       â”œâ”€patchwork (local) FUN(X[[i]], ...)\n 10.       â””â”€patchwork:::plot_table.ggplot(X[[i]], ...)\n 11.         â””â”€ggplot2::ggplotGrob(x)\n 12.           â”œâ”€ggplot2::ggplot_gtable(ggplot_build(x))\n 13.           â”‚ â””â”€ggplot2:::attach_plot_env(data$plot$plot_env)\n 14.           â”‚   â””â”€base::options(ggplot2_plot_env = env)\n 15.           â”œâ”€ggplot2::ggplot_build(x)\n 16.           â””â”€ggplot2:::ggplot_build.ggplot(x)\n 17.             â””â”€ggplot2:::by_layer(...)\n 18.               â”œâ”€rlang::try_fetch(...)\n 19.               â”‚ â”œâ”€base::tryCatch(...)\n 20.               â”‚ â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n 21.               â”‚ â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 22.               â”‚ â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n 23.               â”‚ â””â”€base::withCallingHandlers(...)\n 24.               â””â”€ggplot2 (local) f(l = layers[[i]], d = data[[i]])\n 25.                 â””â”€l$compute_aesthetics(d, plot)\n 26.                   â””â”€ggplot2 (local) compute_aesthetics(..., self = self)\n 27.                     â””â”€base::lapply(aesthetics, eval_tidy, data = data, env = env)\n 28.                       â””â”€rlang (local) FUN(X[[i]], ...)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 1512 scans\n12: 4194 scans\n16: 2317 scans\n18: 2538 scans\n2:  2686 scans\n21/LK:  3983 scans\n7:  1520 scans\n9:  4293 scans\n9.5:    9887 scans\nMR: 2833 scans\nWS: 2179 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1512\n\n\n\n\n\n=== station: 12\n# scans: 4194\n\n\n\n\n\n=== station: 16\n# scans: 2317\n\n\n\n\n\n=== station: 18\n# scans: 2538\n\n\n\n\n\n=== station: 2\n# scans: 2686\n\n\n\n\n\n=== station: 21/LK\n# scans: 3983\n\n\n\n\n\n=== station: 7\n# scans: 1520\n\n\n\n\n\n=== station: 9\n# scans: 4293\n\n\n\n\n\n=== station: 9.5\n# scans: 9887\n\n\n\n\n\n=== station: MR\n# scans: 2833\n\n\n\n\n\n=== station: WS\n# scans: 2179\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS19266.html",
    "href": "cruise_report/cruise_reports/WS19266.html",
    "title": "WS19266",
    "section": "",
    "text": "WS19266\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n&lt;error/rlang_error&gt;\nError in `geom_point()`:\n! Problem while computing aesthetics.\nâ„¹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'time_elapsed' not found\n---\nBacktrace:\n     â–†\n  1. â”œâ”€base::tryCatch(...)\n  2. â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n  3. â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n  4. â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n  5. â”œâ”€base::print(combined_plot)\n  6. â””â”€patchwork:::print.patchwork(combined_plot)\n  7.   â””â”€patchwork:::build_patchwork(plot, plot$layout$guides %||% \"auto\")\n  8.     â””â”€base::lapply(x$plots, plot_table, guides = guides)\n  9.       â”œâ”€patchwork (local) FUN(X[[i]], ...)\n 10.       â””â”€patchwork:::plot_table.ggplot(X[[i]], ...)\n 11.         â””â”€ggplot2::ggplotGrob(x)\n 12.           â”œâ”€ggplot2::ggplot_gtable(ggplot_build(x))\n 13.           â”‚ â””â”€ggplot2:::attach_plot_env(data$plot$plot_env)\n 14.           â”‚   â””â”€base::options(ggplot2_plot_env = env)\n 15.           â”œâ”€ggplot2::ggplot_build(x)\n 16.           â””â”€ggplot2:::ggplot_build.ggplot(x)\n 17.             â””â”€ggplot2:::by_layer(...)\n 18.               â”œâ”€rlang::try_fetch(...)\n 19.               â”‚ â”œâ”€base::tryCatch(...)\n 20.               â”‚ â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n 21.               â”‚ â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 22.               â”‚ â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n 23.               â”‚ â””â”€base::withCallingHandlers(...)\n 24.               â””â”€ggplot2 (local) f(l = layers[[i]], d = data[[i]])\n 25.                 â””â”€l$compute_aesthetics(d, plot)\n 26.                   â””â”€ggplot2 (local) compute_aesthetics(..., self = self)\n 27.                     â””â”€base::lapply(aesthetics, eval_tidy, data = data, env = env)\n 28.                       â””â”€rlang (local) FUN(X[[i]], ...)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 1509 scans\n12: 3203 scans\n16: 2062 scans\n18: 4859 scans\n2:  1884 scans\n21/LK:  4812 scans\n7:  1661 scans\n9:  3371 scans\n9.5:    9102 scans\nMR: 5673 scans\nWS: 3570 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1509\n\n\n\n\n\n=== station: 12\n# scans: 3203\n\n\n\n\n\n=== station: 16\n# scans: 2062\n\n\n\n\n\n=== station: 18\n# scans: 4859\n\n\n\n\n\n=== station: 2\n# scans: 1884\n\n\n\n\n\n=== station: 21/LK\n# scans: 4812\n\n\n\n\n\n=== station: 7\n# scans: 1661\n\n\n\n\n\n=== station: 9\n# scans: 3371\n\n\n\n\n\n=== station: 9.5\n# scans: 9102\n\n\n\n\n\n=== station: MR\n# scans: 5673\n\n\n\n\n\n=== station: WS\n# scans: 3570\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS20006.html",
    "href": "cruise_report/cruise_reports/WS20006.html",
    "title": "WS20006",
    "section": "",
    "text": "WS20006\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n&lt;error/rlang_error&gt;\nError in `geom_point()`:\n! Problem while computing aesthetics.\nâ„¹ Error occurred in the 1st layer.\nCaused by error in `FUN()`:\n! object 'time_elapsed' not found\n---\nBacktrace:\n     â–†\n  1. â”œâ”€base::tryCatch(...)\n  2. â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n  3. â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n  4. â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n  5. â”œâ”€base::print(combined_plot)\n  6. â””â”€patchwork:::print.patchwork(combined_plot)\n  7.   â””â”€patchwork:::build_patchwork(plot, plot$layout$guides %||% \"auto\")\n  8.     â””â”€base::lapply(x$plots, plot_table, guides = guides)\n  9.       â”œâ”€patchwork (local) FUN(X[[i]], ...)\n 10.       â””â”€patchwork:::plot_table.ggplot(X[[i]], ...)\n 11.         â””â”€ggplot2::ggplotGrob(x)\n 12.           â”œâ”€ggplot2::ggplot_gtable(ggplot_build(x))\n 13.           â”‚ â””â”€ggplot2:::attach_plot_env(data$plot$plot_env)\n 14.           â”‚   â””â”€base::options(ggplot2_plot_env = env)\n 15.           â”œâ”€ggplot2::ggplot_build(x)\n 16.           â””â”€ggplot2:::ggplot_build.ggplot(x)\n 17.             â””â”€ggplot2:::by_layer(...)\n 18.               â”œâ”€rlang::try_fetch(...)\n 19.               â”‚ â”œâ”€base::tryCatch(...)\n 20.               â”‚ â”‚ â””â”€base (local) tryCatchList(expr, classes, parentenv, handlers)\n 21.               â”‚ â”‚   â””â”€base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])\n 22.               â”‚ â”‚     â””â”€base (local) doTryCatch(return(expr), name, parentenv, handler)\n 23.               â”‚ â””â”€base::withCallingHandlers(...)\n 24.               â””â”€ggplot2 (local) f(l = layers[[i]], d = data[[i]])\n 25.                 â””â”€l$compute_aesthetics(d, plot)\n 26.                   â””â”€ggplot2 (local) compute_aesthetics(..., self = self)\n 27.                     â””â”€base::lapply(aesthetics, eval_tidy, data = data, env = env)\n 28.                       â””â”€rlang (local) FUN(X[[i]], ...)\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 1353 scans\n12: 6615 scans\n16: 1697 scans\n18: 4576 scans\n2:  1879 scans\n21.5:   11304 scans\n21/LK:  3971 scans\n7:  2 scans\n9:  5276 scans\n9.5:    9876 scans\nMR: 5898 scans\nWS: 3919 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1353\n\n\n\n\n\n=== station: 12\n# scans: 6615\n\n\n\n\n\n=== station: 16\n# scans: 1697\n\n\n\n\n\n=== station: 18\n# scans: 4576\n\n\n\n\n\n=== station: 2\n# scans: 1879\n\n\n\n\n\n=== station: 21.5\n# scans: 11304\n\n\n\n\n\n=== station: 21/LK\n# scans: 3971\n\n\n\n\n\n=== station: 7\n# scans: 2\n\n\n\n\n\n=== station: 9\n# scans: 5276\n\n\n\n\n\n=== station: 9.5\n# scans: 9876\n\n\n\n\n\n=== station: MR\n# scans: 5898\n\n\n\n\n\n=== station: WS\n# scans: 3919\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS20279.html",
    "href": "cruise_report/cruise_reports/WS20279.html",
    "title": "WS20279",
    "section": "",
    "text": "WS20279\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 21 scans\n12: 4250 scans\n16: 1746 scans\n18: 3310 scans\n2:  3305 scans\n21/LK:  2868 scans\n7:  1171 scans\n9:  5223 scans\n9.5:    8506 scans\nMR: 5404 scans\nWS: 2741 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 21\n\n\n\n\n\n=== station: 12\n# scans: 4250\n\n\n\n\n\n=== station: 16\n# scans: 1746\n\n\n\n\n\n=== station: 18\n# scans: 3310\n\n\n\n\n\n=== station: 2\n# scans: 3305\n\n\n\n\n\n=== station: 21/LK\n# scans: 2868\n\n\n\n\n\n=== station: 7\n# scans: 1171\n\n\n\n\n\n=== station: 9\n# scans: 5223\n\n\n\n\n\n=== station: 9.5\n# scans: 8506\n\n\n\n\n\n=== station: MR\n# scans: 5404\n\n\n\n\n\n=== station: WS\n# scans: 2741\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS21032.html",
    "href": "cruise_report/cruise_reports/WS21032.html",
    "title": "WS21032",
    "section": "",
    "text": "WS21032\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n12: 4193 scans\n15: 10055 scans\n18: 3423 scans\n21/LK:  3445 scans\n9:  5675 scans\n9.5:    10321 scans\nMR: 6794 scans\nWS: 1557 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 12\n# scans: 4193\n\n\n\n\n\n=== station: 15\n# scans: 10055\n\n\n\n\n\n=== station: 18\n# scans: 3423\n\n\n\n\n\n=== station: 21/LK\n# scans: 3445\n\n\n\n\n\n=== station: 9\n# scans: 5675\n\n\n\n\n\n=== station: 9.5\n# scans: 10321\n\n\n\n\n\n=== station: MR\n# scans: 6794\n\n\n\n\n\n=== station: WS\n# scans: 1557\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS21151.html",
    "href": "cruise_report/cruise_reports/WS21151.html",
    "title": "WS21151",
    "section": "",
    "text": "WS21151\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n1:  4083 scans\n10: 3495 scans\n12: 4989 scans\n16: 2068 scans\n18: 4476 scans\n21/LK:  3836 scans\n7:  2401 scans\n9:  8790 scans\n9.5:    11589 scans\nMR: 3370 scans\nWS: 3363 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 1\n# scans: 4083\n\n\n\n\n\n=== station: 10\n# scans: 3495\n\n\n\n\n\n=== station: 12\n# scans: 4989\n\n\n\n\n\n=== station: 16\n# scans: 2068\n\n\n\n\n\n=== station: 18\n# scans: 4476\n\n\n\n\n\n=== station: 21/LK\n# scans: 3836\n\n\n\n\n\n=== station: 7\n# scans: 2401\n\n\n\n\n\n=== station: 9\n# scans: 8790\n\n\n\n\n\n=== station: 9.5\n# scans: 11589\n\n\n\n\n\n=== station: MR\n# scans: 3370\n\n\n\n\n\n=== station: WS\n# scans: 3363\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS21338.html",
    "href": "cruise_report/cruise_reports/WS21338.html",
    "title": "WS21338",
    "section": "",
    "text": "WS21338\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 1701 scans\n12: 5459 scans\n16: 2734 scans\n18: 5483 scans\n2:  2746 scans\n21/LK:  5188 scans\n7:  5964 scans\n9:  4059 scans\n9.5:    13009 scans\nMR: 4367 scans\nWS: 3000 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 1701\n\n\n\n\n\n=== station: 12\n# scans: 5459\n\n\n\n\n\n=== station: 16\n# scans: 2734\n\n\n\n\n\n=== station: 18\n# scans: 5483\n\n\n\n\n\n=== station: 2\n# scans: 2746\n\n\n\n\n\n=== station: 21/LK\n# scans: 5188\n\n\n\n\n\n=== station: 7\n# scans: 5964\n\n\n\n\n\n=== station: 9\n# scans: 4059\n\n\n\n\n\n=== station: 9.5\n# scans: 13009\n\n\n\n\n\n=== station: MR\n# scans: 4367\n\n\n\n\n\n=== station: WS\n# scans: 3000\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS22072.html",
    "href": "cruise_report/cruise_reports/WS22072.html",
    "title": "WS22072",
    "section": "",
    "text": "WS22072\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 89 scans\n12: 4880 scans\n16: 2678 scans\n18: 4330 scans\n2:  2592 scans\n21/LK:  5318 scans\n3:  4489 scans\n6.5:    7772 scans\n7:  2435 scans\n9:  4631 scans\n9.5:    9529 scans\nEK_IN:  2736 scans\nEK_MID: 2583 scans\nEK_OFF: 4189 scans\nMR: 5130 scans\nWS: 4022 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 89\n\n\n\n\n\n=== station: 12\n# scans: 4880\n\n\n\n\n\n=== station: 16\n# scans: 2678\n\n\n\n\n\n=== station: 18\n# scans: 4330\n\n\n\n\n\n=== station: 2\n# scans: 2592\n\n\n\n\n\n=== station: 21/LK\n# scans: 5318\n\n\n\n\n\n=== station: 3\n# scans: 4489\n\n\n\n\n\n=== station: 6.5\n# scans: 7772\n\n\n\n\n\n=== station: 7\n# scans: 2435\n\n\n\n\n\n=== station: 9\n# scans: 4631\n\n\n\n\n\n=== station: 9.5\n# scans: 9529\n\n\n\n\n\n=== station: EK_IN\n# scans: 2736\n\n\n\n\n\n=== station: EK_MID\n# scans: 2583\n\n\n\n\n\n=== station: EK_OFF\n# scans: 4189\n\n\n\n\n\n=== station: MR\n# scans: 5130\n\n\n\n\n\n=== station: WS\n# scans: 4022\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS22215.html",
    "href": "cruise_report/cruise_reports/WS22215.html",
    "title": "WS22215",
    "section": "",
    "text": "WS22215\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n12: 1642 scans\n18: 1358 scans\n2:  620 scans\n21/LK:  1203 scans\n9:  903 scans\n9.5:    2023 scans\nMR: 843 scans\nWS: 1119 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 12\n# scans: 1642\n\n\n\n\n\n=== station: 18\n# scans: 1358\n\n\n\n\n\n=== station: 2\n# scans: 620\n\n\n\n\n\n=== station: 21/LK\n# scans: 1203\n\n\n\n\n\n=== station: 9\n# scans: 903\n\n\n\n\n\n=== station: 9.5\n# scans: 2023\n\n\n\n\n\n=== station: MR\n# scans: 843\n\n\n\n\n\n=== station: WS\n# scans: 1119\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\n\n[1] \"In plot,ctd-method() : which=\\\"CDOMdissolved_oxygenoxygen_saturationchlorophyll_concentrationchlorophyll_fluorescence\\\" cannot be handled\"\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n[1] \"In plot,ctd-method() : which=\\\"photosynthetically_available_radiationbeam_attenuationbeam_transmission\\\" cannot be handled\"\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS22337.html",
    "href": "cruise_report/cruise_reports/WS22337.html",
    "title": "WS22337",
    "section": "",
    "text": "WS22337\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 4 scans\n12: 4962 scans\n16: 2698 scans\n18: 4697 scans\n2:  2713 scans\n21/LK:  6113 scans\n7:  2492 scans\n9:  4702 scans\n9.5:    9073 scans\nMR: 5551 scans\nWS: 5575 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 4\n\n\n\n\n\n=== station: 12\n# scans: 4962\n\n\n\n\n\n=== station: 16\n# scans: 2698\n\n\n\n\n\n=== station: 18\n# scans: 4697\n\n\n\n\n\n=== station: 2\n# scans: 2713\n\n\n\n\n\n=== station: 21/LK\n# scans: 6113\n\n\n\n\n\n=== station: 7\n# scans: 2492\n\n\n\n\n\n=== station: 9\n# scans: 4702\n\n\n\n\n\n=== station: 9.5\n# scans: 9073\n\n\n\n\n\n=== station: MR\n# scans: 5551\n\n\n\n\n\n=== station: WS\n# scans: 5575\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  },
  {
    "objectID": "cruise_report/cruise_reports/WS23061.html",
    "href": "cruise_report/cruise_reports/WS23061.html",
    "title": "WS23061",
    "section": "",
    "text": "WS23061\n\n\nsetup\nif (!nzchar(system.file(package = \"librarian\"))) {\n  install.packages(\"librarian\")\n}\n\nlibrarian::shelf(\n  quiet = TRUE,\n  readr, here, fs, ggplot2, glue, \"jiho/castr\", dplyr, oce, patchwork, purrr, tidyr\n)\n\n\n\n\nCode\nctd_dir &lt;- here(\"data/01_raw/combined_fl_keys_data\")\nfpath &lt;- here(glue(\n  \"{ctd_dir}/{params$cruise_id}_fl_keys_ctd.csv\"\n))\n\ncruise_df &lt;- read_csv(fpath, show_col_types = FALSE, col_types = cols(station = col_character()))\n\n\n\n\nplot depth & pressure vs time elapsed\ntryCatch({\n  plots &lt;- list()\n  \n  for (station_name in unique(cruise_df$station)) {\n    subset_df &lt;- filter(cruise_df, station == station_name)\n    plots[[station_name]] &lt;- ggplot(subset_df, aes(x = time_elapsed)) +\n      geom_point(aes(y = depth), color = \"blue\") +  # Plot depth in blue\n      geom_line(aes(y = sea_water_pressure), color = \"red\") +  # Plot sea water pressure in red\n      ggtitle(glue(\"{station_name}\")) +\n      theme(\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.ticks.y = element_blank()\n      )  # Remove individual axis titles and text\n  }\n  \n  # drop nulls\n  plots &lt;- purrr::compact(plots)\n  \n  # Combine all plots into a grid\n  combined_plot &lt;- wrap_plots(plots) + \n    plot_layout(ncol = 4) +  # Adjust ncol to set number of columns in the grid\n    plot_annotation(\n      title = \"Depth (blue) and Pressure (red)\",\n      subtitle = \"Each panel represents a different station\",\n      caption = \"Time Elapsed (x-axis) vs Depth & Pressure (y-axis)\"\n    ) +\n    theme(\n      plot.tag = element_text(size = 12, face = \"bold\"),\n      plot.tag.position = \"topleft\",\n      axis.title.x = element_text(margin = margin(t = 10)),\n      axis.title.y = element_text(margin = margin(r = 10))\n    )\n  \n  print(combined_plot)\n}, error = function(er){\n  print(er)\n});\n\n\n\n\n\n\n\nplot across all stations\np &lt;- ggplot(cruise_df, aes(x = time, y = depth, fill = station)) +\n  geom_col() +  # This creates the bars\n  # geom_text(aes(label = station), vjust = -0.3) +  # This adds labels to each bar, adjust vjust for position\n  labs(x = \"Time\", y = \"Depth\", title = \"Depth over Time by Station\") +  # Set labels and title\n  theme_minimal()  # Use a minimal theme\nprint(p)\n\n\n\n\n\n\n\ncreate oce.ctd objects from dataframes\nctd_load &lt;- function(data, other_params = NULL) {\n  \n  # create csv into ctd object\n  test_ctd &lt;-\n    as.ctd(\n      salinity    = data$sea_water_salinity,\n      temperature = data$sea_water_temperature,\n      pressure    = data$sea_water_pressure,\n      station     = data$station\n    )\n  \n  # add additional columns to ctd object\n  if (!is.null(other_params)) {\n    for (param_name in other_params) {\n      test_ctd &lt;-\n        oceSetData(\n          object = test_ctd,\n          name   = param_name,\n          value  = data[[param_name]]\n        )\n    }\n  }\n  print(glue(\"{data$station[1]}:\\t{length(test_ctd@data$scan)} scans\"))\n\n\n  return(test_ctd)\n}\n\n# Define other parameters to add\nother_params &lt;- c(\n  \"cruise_id\", \"station\", \"time\", \"time_elapsed\", \n  \"latitude\", \"longitude\", \"sea_water_electrical_conductivity\", \n  \"CDOM\", \"dissolved_oxygen\",\"oxygen_saturation\", \"chlorophyll_concentration\", \n  \"chlorophyll_fluorescence\", \"photosynthetically_available_radiation\", \n  \"beam_attenuation\",\"beam_transmission\", \"depth\", \"sea_water_sigma_t\",\n  \"descent_rate\", \"sound_velocity\"\n)\n\n# Split data by station and create data list\nctd_FK &lt;- cruise_df %&gt;%\n  split(.$station) %&gt;%\n  map(~ ctd_load(.x, other_params = other_params)) # ~ is a lambda(x)\n\n\n10: 80 scans\n12: 4670 scans\n16: 2674 scans\n18: 4197 scans\n2:  4282 scans\n21/LK:  4542 scans\n7:  3010 scans\n9:  3990 scans\n9.5:    6867 scans\nMR: 4246 scans\nWS: 3628 scans\n\n\n\n\nplotting scans for each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(i)\n  print(glue(\"=== station: {cast@metadata$station[1]}\"))\n  print(glue(\"# scans: {length(cast@data$scan)}\"))\n  plotScan(cast)\n}\n\n\n=== station: 10\n# scans: 80\n\n\n\n\n\n=== station: 12\n# scans: 4670\n\n\n\n\n\n=== station: 16\n# scans: 2674\n\n\n\n\n\n=== station: 18\n# scans: 4197\n\n\n\n\n\n=== station: 2\n# scans: 4282\n\n\n\n\n\n=== station: 21/LK\n# scans: 4542\n\n\n\n\n\n=== station: 7\n# scans: 3010\n\n\n\n\n\n=== station: 9\n# scans: 3990\n\n\n\n\n\n=== station: 9.5\n# scans: 6867\n\n\n\n\n\n=== station: MR\n# scans: 4246\n\n\n\n\n\n=== station: WS\n# scans: 3628\n\n\n\n\n\n\n\nplotting each cast in the first list\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  tryCatch({\n    plot(ctdDecimate(ctdTrim(cast)))\n  }, error = function(e){\n    print(e)\n  })\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplotting other physical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"sea_water_electrical_conductivity\",\n        \"descent_rate\", \"sound_velocity\",\n        \"sea_water_sigma_t\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"unknown xtype value (\\\"5.50915\\\")\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\n\n\n\nplotting other nutrient parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"CDOM\", \"dissolved_oxygen\",\n        \"oxygen_saturation\",\n        \"chlorophyll_concentration\", \"chlorophyll_fluorescence\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"unknown xtype value (\\\"1.123\\\")\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] \"need finite 'xlim' values\"\n\n\n\n\n\n\n\nplotting other optical parameters for each cast\n# Loop through each CTD cast\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # Assuming each sublist contains only one relevant CTD object\n  tryCatch({\n    # Extract metadata for station name and cruise ID\n    station_name &lt;- cast@metadata$station[1]\n    cruise_id &lt;- cast@data$cruise_id[1]\n\n    # Generate a title with station name and cruise ID\n    overall_title &lt;- glue::glue(\"Station: {station_name}, Cruise ID: {cruise_id}\")\n\n    # Set margins: increase the outer margin for the title\n    par(oma = c(0, 0, 3, 0))  # Top outer margin increased for title\n\n    # Plotting function with specific parameters\n    oce::plot(\n      x = ctdDecimate(ctdTrim(cast)),\n      which = c(\n        \"photosynthetically_available_radiation\",\n        \"beam_attenuation\",\"beam_transmission\"\n      ),\n      main = \"\"  # No main title for individual subplots\n    )\n\n    # Place a single overall title at the top of the plot frame\n    mtext(overall_title, side = 3, line = 1, outer = TRUE, cex = 1.5)\n\n    # Reset outer margins to default\n    par(oma = c(0, 0, 0, 0))\n\n  }, error = function(e) {\n    print(e$message)  # Print any errors that occur during plotting\n  })\n}\n\n\n[1] \"unknown xtype value (\\\"0.098973\\\")\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop through every cast, clean, & save\ncombined_df &lt;- data.frame()\nfor (i in seq(ctd_FK)){\n  cast &lt;- ctd_FK[[i]]  # 1 is selecting only the first sublist\n  # print(class(cast))\n  # clean cast \n  trimmed_cast &lt;- ctdTrim(cast)\n  decimated_cast &lt;- ctdDecimate(trimmed_cast, p = 0.5)  # binned to 0.5 m\n  \n  # convert to df\n  cast_df &lt;- as.data.frame(decimated_cast@data)\n  \n  # Add metadata\n  # assumes station ID and cruise ID the same for all & just uses 1st one\n  cast_df &lt;- mutate(\n    cast_df,\n    station = cast@data$station[1],\n    cruise_id = cast@data$cruise_id[1]\n  )\n\n  # drop NA rows left by cleaning\n  cast_df &lt;- subset(cast_df, !is.na(scan))\n  \n  # Append the data to the combined dataframe\n  combined_df &lt;- rbind(combined_df, cast_df)\n}\n# Save to CSV\nfile_path &lt;- here(glue(\"data/cleaned/{cruise_id}.csv\"))\nwrite.csv(combined_df, file_path, row.names = FALSE)"
  }
]